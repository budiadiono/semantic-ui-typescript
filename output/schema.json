{
  "api": {
    "name": "api",
    "callbacks": [
      {
        "description": "Allows modifying settings before request, or cancelling request",
        "module": "api",
        "name": "beforeSend",
        "context": "initialized element",
        "params": {
          "settings": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Allows modifying XHR object for request",
        "module": "api",
        "name": "beforeXHR",
        "context": "",
        "params": {
          "xhrObject": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback that occurs when request is made. Receives both the API success promise and the XHR request promise.",
        "module": "api",
        "name": "onRequest",
        "context": "state context",
        "params": {
          "promise": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Allows modifying the server's response before parsed by other callbacks to determine API event success",
        "module": "api",
        "name": "onResponse",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Determines whether completed JSON response should be treated as successful",
        "module": "api",
        "name": "successTest",
        "context": "",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback after successful response, JSON response must pass successTest",
        "module": "api",
        "name": "onSuccess",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on request complete regardless of conditions",
        "module": "api",
        "name": "onComplete",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on failed response, or JSON response that fails successTest",
        "module": "api",
        "name": "onFailure",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on server error from returned status code, or XHR failure.",
        "module": "api",
        "name": "onError",
        "context": "state context",
        "params": {
          "errorMessage": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on abort caused by user clicking a link or manually cancelling request.",
        "module": "api",
        "name": "onAbort",
        "context": "state context",
        "params": {
          "errorMessage": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "on",
        "": "",
        "description": "When API event should occur",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "cache",
        "": "",
        "description": "Can be set to 'local' to cache successful returned AJAX responses when using a JSON API. This helps avoid server roundtrips when API endpoints will return the same results when accessed repeatedly. Setting to false, will add cache busting parameters to the URL.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "stateContext",
        "": "",
        "description": "UI state will be applied to this element, defaults to triggering element.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "encodeParameters",
        "": "",
        "description": "Whether to encode parameters with encodeURIComponent before adding into url string",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "defaultData",
        "": "",
        "description": "Whether to automatically include default data like {value} and {text}",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "serializeForm",
        "": "",
        "description": "Whether to serialize closest form and include in request",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "throttle",
        "": "",
        "description": "How long to wait when a request is made before triggering request, useful for rate limiting oninput",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "throttleFirstRequest",
        "": "",
        "description": "When set to false will not delay the first request made, when no others are queued",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "interruptRequests",
        "": "",
        "description": "Whether an API request can occur while another request is still pending",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "loadingDuration",
        "": "",
        "description": "Minimum duration to show loading indication",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "hideError",
        "": "",
        "description": "The default auto will automatically remove error state after error duration, unless the element is a form",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Behavior",
        "name": "errorDuration",
        "": "",
        "description": "Setting to true, will not remove error. Setting to a duration in milliseconds to show error state after request error.",
        "type": "any",
        "default": 2000,
        "isDummy": true
      },
      {
        "values": "String or false",
        "module": "api",
        "category": "Request Settings",
        "name": "action",
        "": "",
        "description": "Named API action for query, originally specified in $.fn.settings.api",
        "type": "string | false",
        "isDummy": true
      },
      {
        "values": "String or false",
        "module": "api",
        "category": "Request Settings",
        "name": "url",
        "": "",
        "description": "Templated URL for query, will override specified action",
        "type": "string | false",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Request Settings",
        "name": "urlData",
        "": "",
        "description": "Variables to use for replacement",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "values": "{} or false",
        "module": "api",
        "category": "Request Settings",
        "name": "response",
        "": "",
        "description": "Can be set to a Javascript object which will be returned automatically instead of requesting JSON from server",
        "type": "{} | false",
        "isDummy": true
      },
      {
        "values": "function or false",
        "module": "api",
        "category": "Request Settings",
        "name": "responseAsync",
        "": "",
        "description": "When specified, this function can be used to retrieve content from a server and return it asynchronously instead of a standard AJAX call. The callback function should return the server response.",
        "params": {
          "settings": {
            "type": "any"
          },
          "callback": {
            "type": "any"
          }
        },
        "type": "Function | false",
        "isFunction": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Request Settings",
        "name": "mockResponse",
        "": "",
        "description": "Alias of response",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Request Settings",
        "name": "mockResponseAsync",
        "": "",
        "description": "Alias of responseAsync",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "'post', 'get'",
        "module": "api",
        "category": "Request Settings",
        "name": "method",
        "": "",
        "description": "Method for transmitting request to server",
        "type": "'post' | 'get'",
        "default": "get",
        "isDummy": true
      },
      {
        "values": "'xml', 'json', 'jsonp', 'script', 'html', 'text'",
        "module": "api",
        "category": "Request Settings",
        "name": "dataType",
        "": "",
        "description": "Expected data type of response",
        "type": "'xml' | 'json' | 'jsonp' | 'script' | 'html' | 'text'",
        "default": "json",
        "isDummy": true
      },
      {
        "values": "",
        "module": "api",
        "category": "Request Settings",
        "name": "data",
        "": "",
        "description": "POST/GET Data to Send with Request",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Allows modifying settings before request, or cancelling request",
        "module": "api",
        "name": "beforeSend",
        "context": "initialized element",
        "params": {
          "settings": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Allows modifying XHR object for request",
        "module": "api",
        "name": "beforeXHR",
        "context": "",
        "params": {
          "xhrObject": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback that occurs when request is made. Receives both the API success promise and the XHR request promise.",
        "module": "api",
        "name": "onRequest",
        "context": "state context",
        "params": {
          "promise": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Allows modifying the server's response before parsed by other callbacks to determine API event success",
        "module": "api",
        "name": "onResponse",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Determines whether completed JSON response should be treated as successful",
        "module": "api",
        "name": "successTest",
        "context": "",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after successful response, JSON response must pass successTest",
        "module": "api",
        "name": "onSuccess",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on request complete regardless of conditions",
        "module": "api",
        "name": "onComplete",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on failed response, or JSON response that fails successTest",
        "module": "api",
        "name": "onFailure",
        "context": "state context",
        "params": {
          "response": {
            "type": "any"
          },
          "element": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on server error from returned status code, or XHR failure.",
        "module": "api",
        "name": "onError",
        "context": "state context",
        "params": {
          "errorMessage": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on abort caused by user clicking a link or manually cancelling request.",
        "module": "api",
        "name": "onAbort",
        "context": "state context",
        "params": {
          "errorMessage": {
            "type": "any"
          },
          "element": {
            "type": "any"
          },
          "xhr": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "api",
        "module": "api",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "name": "base",
        "module": "api",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Execute query using existing API settings",
        "module": "api",
        "name": "query",
        "isDummy": true
      },
      {
        "description": "Adds data to existing templated url and returns full url string",
        "module": "api",
        "name": "add url data",
        "params": {
          "url": {
            "type": "string"
          },
          "data": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Gets promise for current API request",
        "module": "api",
        "name": "get request",
        "isDummy": true
      },
      {
        "description": "Aborts current API request",
        "module": "api",
        "name": "abort",
        "isDummy": true
      },
      {
        "description": "Removes loading and error state from element",
        "module": "api",
        "name": "reset",
        "isDummy": true
      },
      {
        "description": "Returns whether last request was cancelled",
        "module": "api",
        "name": "was cancelled",
        "isDummy": true
      },
      {
        "description": "Returns whether last request was failure",
        "module": "api",
        "name": "was failure",
        "isDummy": true
      },
      {
        "description": "Returns whether last request was successful",
        "module": "api",
        "name": "was successful",
        "isDummy": true
      },
      {
        "description": "Returns whether last request was completed",
        "module": "api",
        "name": "was complete",
        "isDummy": true
      },
      {
        "description": "Returns whether element is disabled",
        "module": "api",
        "name": "is disabled",
        "isDummy": true
      },
      {
        "description": "Returns whether element response is mocked",
        "module": "api",
        "name": "is mocked",
        "isDummy": true
      },
      {
        "description": "Returns whether element is loading",
        "module": "api",
        "name": "is loading",
        "isDummy": true
      },
      {
        "description": "Sets loading state to element",
        "module": "api",
        "name": "set loading",
        "isDummy": true
      },
      {
        "description": "Sets error state to element",
        "module": "api",
        "name": "set error",
        "isDummy": true
      },
      {
        "description": "Removes loading state to element",
        "module": "api",
        "name": "remove loading",
        "isDummy": true
      },
      {
        "description": "Removes error state to element",
        "module": "api",
        "name": "remove error",
        "isDummy": true
      },
      {
        "description": "Gets event that API request will occur on",
        "module": "api",
        "name": "get event",
        "isDummy": true
      },
      {
        "description": "Returns encodeURIComponent value only if value passsed is not already encoded",
        "module": "api",
        "name": "get url encoded value",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Reads a locally cached response for a URL",
        "module": "api",
        "name": "read cached response",
        "params": {
          "url": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Writes a cached response for a URL",
        "module": "api",
        "name": "write cached response",
        "params": {
          "url": {
            "type": "string"
          },
          "response": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Creates new cache, removing all locally cached URLs",
        "module": "api",
        "name": "create cache",
        "isDummy": true
      },
      {
        "description": "Removes API settings from the page and all events",
        "module": "api",
        "name": "destroy",
        "isDummy": true
      }
    ]
  },
  "accordion": {
    "name": "accordion",
    "callbacks": [
      {
        "description": "Callback before element opens",
        "module": "accordion",
        "name": "onOpening",
        "context": "active content"
      },
      {
        "description": "Callback after element is open",
        "module": "accordion",
        "name": "onOpen",
        "context": "active content"
      },
      {
        "description": "Callback before element closes",
        "module": "accordion",
        "name": "onClosing",
        "context": "active content"
      },
      {
        "description": "Callback after element is closed",
        "module": "accordion",
        "name": "onClose",
        "context": "active content"
      },
      {
        "description": "Callback on element open or close",
        "module": "accordion",
        "name": "onChange",
        "context": "active content"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "exclusive",
        "": "",
        "description": "Only allow one section open at a time",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "on",
        "": "",
        "description": "Event on title that will cause accordion to open",
        "type": "any",
        "default": "click",
        "isDummy": true
      },
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "animateChildren",
        "": "",
        "description": "Whether child content opacity should be animated (may cause performance issues with many child elements)",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "collapsible",
        "": "",
        "description": "Allow active sections to collapse",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "duration",
        "": "",
        "description": "Duration in ms of opening animation",
        "type": "number",
        "default": 350,
        "isDummy": true
      },
      {
        "values": "",
        "module": "accordion",
        "category": "Behavior",
        "name": "easing",
        "": "",
        "description": "Easing of opening animation. EaseInOutQuint is included with accordion, for additional options you must include easing equations.",
        "type": "any",
        "default": "easeOutQuad",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback before element opens",
        "module": "accordion",
        "name": "onOpening",
        "context": "active content",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after element is open",
        "module": "accordion",
        "name": "onOpen",
        "context": "active content",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before element closes",
        "module": "accordion",
        "name": "onClosing",
        "context": "active content",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after element is closed",
        "module": "accordion",
        "name": "onClose",
        "context": "active content",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on element open or close",
        "module": "accordion",
        "name": "onChange",
        "context": "active content",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "observeChanges",
        "module": "accordion",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "closeNested",
        "module": "accordion",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Refreshes all cached selectors and data",
        "module": "accordion",
        "name": "refresh",
        "isDummy": true
      },
      {
        "description": "Opens accordion content at index",
        "module": "accordion",
        "name": "open ",
        "params": {
          "index": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Closes accordion content that are not active",
        "module": "accordion",
        "name": "close others",
        "isDummy": true
      },
      {
        "description": "Closes accordion content at index",
        "module": "accordion",
        "name": "close ",
        "params": {
          "index": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Toggles accordion content at index",
        "module": "accordion",
        "name": "toggle ",
        "params": {
          "index": {
            "type": "number"
          }
        },
        "isDummy": true
      }
    ]
  },
  "checkbox": {
    "name": "checkbox",
    "callbacks": [
      {
        "description": "Callback after a checkbox is either checked or unchecked.",
        "module": "checkbox",
        "name": "onChange",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is checked.",
        "module": "checkbox",
        "name": "onChecked",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is set to undeterminate.",
        "module": "checkbox",
        "name": "onIndeterminate",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is set to determinate.",
        "module": "checkbox",
        "name": "onDeterminate",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is unchecked.",
        "module": "checkbox",
        "name": "onUnchecked",
        "context": "HTML input element"
      },
      {
        "description": "Callback before a checkbox is checked. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeChecked",
        "context": "HTML input element"
      },
      {
        "description": "Callback before a checkbox is set to undeterminate. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeIndeterminate",
        "context": "HTML input element"
      },
      {
        "description": "Callback before a checkbox is set to determinate. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeDeterminate",
        "context": "HTML input element"
      },
      {
        "description": "Callback before a checkbox is unchecked. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeUnchecked",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is enabled.",
        "module": "checkbox",
        "name": "onEnable",
        "context": "HTML input element"
      },
      {
        "description": "Callback after a checkbox is disabled.",
        "module": "checkbox",
        "name": "onDisable",
        "context": "HTML input element"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "checkbox",
        "category": "",
        "name": "uncheckable",
        "": "auto",
        "description": "Setting to true/false will determine whether an input will allow no selection. Auto will set disallow this behavior only for radio boxes",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "checkbox",
        "category": "",
        "name": "fireOnInit",
        "": "FALSE",
        "description": "Whether callbacks for checked status should be fired on init as well as change",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is either checked or unchecked.",
        "module": "checkbox",
        "name": "onChange",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is checked.",
        "module": "checkbox",
        "name": "onChecked",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is set to undeterminate.",
        "module": "checkbox",
        "name": "onIndeterminate",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is set to determinate.",
        "module": "checkbox",
        "name": "onDeterminate",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is unchecked.",
        "module": "checkbox",
        "name": "onUnchecked",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before a checkbox is checked. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeChecked",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before a checkbox is set to undeterminate. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeIndeterminate",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before a checkbox is set to determinate. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeDeterminate",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before a checkbox is unchecked. Can cancel change by returning false",
        "module": "checkbox",
        "name": "beforeUnchecked",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is enabled.",
        "module": "checkbox",
        "name": "onEnable",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after a checkbox is disabled.",
        "module": "checkbox",
        "name": "onDisable",
        "context": "HTML input element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "onEnabled",
        "module": "checkbox",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onDisabled",
        "module": "checkbox",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Switches a checkbox from current state",
        "module": "checkbox",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Set a checkbox state to checked",
        "module": "checkbox",
        "name": "check",
        "isDummy": true
      },
      {
        "description": "Set a checkbox state to unchecked",
        "module": "checkbox",
        "name": "uncheck",
        "isDummy": true
      },
      {
        "description": "Set as indeterminate checkbox",
        "module": "checkbox",
        "name": "indeterminate",
        "isDummy": true
      },
      {
        "description": "Set as determinate checkbox",
        "module": "checkbox",
        "name": "determinate",
        "isDummy": true
      },
      {
        "description": "Enable interaction with a checkbox",
        "module": "checkbox",
        "name": "enable",
        "isDummy": true
      },
      {
        "description": "Set a checkbox state to checked without callbacks",
        "module": "checkbox",
        "name": "set checked",
        "isDummy": true
      },
      {
        "description": "Set a checkbox state to unchecked without callbacks",
        "module": "checkbox",
        "name": "set unchecked",
        "isDummy": true
      },
      {
        "description": "Set as indeterminate checkbox without callbacks",
        "module": "checkbox",
        "name": "set indeterminate",
        "isDummy": true
      },
      {
        "description": "Set as determinate checkbox without callbacks",
        "module": "checkbox",
        "name": "set determinate",
        "isDummy": true
      },
      {
        "description": "Enable interaction with a checkbox without callbacks",
        "module": "checkbox",
        "name": "set enabled",
        "isDummy": true
      },
      {
        "description": "Disable interaction with a checkbox without callbacks",
        "module": "checkbox",
        "name": "set disabled",
        "isDummy": true
      },
      {
        "description": "Attach checkbox events to another element",
        "module": "checkbox",
        "name": "attach events",
        "params": {
          "selector": {
            "type": "HTMLElement | JQuery | string"
          },
          "behavior": {
            "type": "Checkbox.BehaviorNames"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns whether element is radio selection",
        "module": "checkbox",
        "name": "is radio",
        "isDummy": true
      },
      {
        "description": "Returns whether element is currently checked",
        "module": "checkbox",
        "name": "is checked",
        "isDummy": true
      },
      {
        "description": "Returns whether element is not checked",
        "module": "checkbox",
        "name": "is unchecked",
        "isDummy": true
      },
      {
        "description": "Returns whether element is able to be changed",
        "module": "checkbox",
        "name": "can change",
        "isDummy": true
      },
      {
        "description": "Returns whether element can be checked (checking if already checked or `beforeChecked` would cancel)",
        "module": "checkbox",
        "name": "should allow check",
        "isDummy": true
      },
      {
        "description": "Returns whether element can be unchecked (checking if already unchecked or `beforeUnchecked` would cancel)",
        "module": "checkbox",
        "name": "should allow uncheck",
        "isDummy": true
      },
      {
        "description": "Returns whether element can be determinate (checking if already determinate or `beforeDeterminate` would cancel)",
        "module": "checkbox",
        "name": "should allow determinate",
        "isDummy": true
      },
      {
        "description": "Returns whether element can be indeterminate (checking if already indeterminate or `beforeIndeterminate` would cancel)",
        "module": "checkbox",
        "name": "should allow indeterminate",
        "isDummy": true
      },
      {
        "description": "Returns whether element is able to be unchecked",
        "module": "checkbox",
        "name": "can uncheck",
        "isDummy": true
      }
    ]
  },
  "colorize": {
    "name": "colorize",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "onDraw",
        "module": "colorize",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "async",
        "module": "colorize",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "colors",
        "module": "colorize",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ]
  },
  "dimmer": {
    "name": "dimmer",
    "callbacks": [
      {
        "description": "Callback on element show",
        "module": "dimmer",
        "name": "onShow",
        "context": "dimmable"
      },
      {
        "description": "Callback on element hide",
        "module": "dimmer",
        "name": "onHide",
        "context": "dimmable"
      },
      {
        "description": "Callback on element show or hide",
        "module": "dimmer",
        "name": "onChange",
        "context": "dimmable"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "opacity",
        "": "auto",
        "description": "Dimmers opacity from 0-1. Defaults to auto which uses the CSS specified opacity.",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "variation",
        "": "FALSE",
        "description": "Specify a variation to add when generating dimmer, like inverted",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "dimmerName",
        "": "FALSE",
        "description": "If initializing a dimmer on a dimmable context, you can use dimmerName to distinguish between multiple dimmers in that context.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "closable",
        "": "auto",
        "description": "Whether clicking on the dimmer should hide the dimmer (Defaults to auto, closable only when settings.on is not hover",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "on",
        "": "FALSE",
        "description": "Can be set to hover or click to show/hide dimmer on dimmable event",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "useCSS",
        "": "TRUE",
        "description": "Whether to dim dimmers using CSS transitions.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "duration",
        "": "",
        "description": "Animation duration of dimming. If an integer is used, that value will apply to both show and hide animations.",
        "type": "number",
        "default": "{\"show\":500,\"hide\":500}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dimmer",
        "category": "Behavior",
        "name": "transition",
        "": "Fade",
        "description": "Named transition to use when animating menu in and out. Fade and slide down are available without including ui transitions",
        "type": "AnimationNames",
        "default": "fade",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on element show",
        "module": "dimmer",
        "name": "onShow",
        "context": "dimmable",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on element hide",
        "module": "dimmer",
        "name": "onHide",
        "context": "dimmable",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on element show or hide",
        "module": "dimmer",
        "name": "onChange",
        "context": "dimmable",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "template",
        "module": "dimmer",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Detaches a given element from DOM and reattaches element inside dimmer",
        "module": "dimmer",
        "name": "add content ",
        "params": {
          "element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Shows dimmer",
        "module": "dimmer",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides dimmer",
        "module": "dimmer",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Toggles current dimmer visibility",
        "module": "dimmer",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Changes dimmer opacity",
        "module": "dimmer",
        "name": "set opacity",
        "params": {
          "opacity": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Creates a new dimmer in dimmable context",
        "module": "dimmer",
        "name": "create",
        "isDummy": true
      },
      {
        "description": "Returns current duration for show or hide event depending on current visibility",
        "module": "dimmer",
        "name": "get duration",
        "isDummy": true
      },
      {
        "description": "Returns DOM element for dimmer",
        "module": "dimmer",
        "name": "get dimmer",
        "isDummy": true
      },
      {
        "description": "Returns whether current dimmable has a dimmer",
        "module": "dimmer",
        "name": "has dimmer",
        "isDummy": true
      },
      {
        "description": "Whether section's dimmer is active",
        "module": "dimmer",
        "name": "is active",
        "isDummy": true
      },
      {
        "description": "Whether dimmer is animating",
        "module": "dimmer",
        "name": "is animating",
        "isDummy": true
      },
      {
        "description": "Whether current element is a dimmer",
        "module": "dimmer",
        "name": "is dimmer",
        "isDummy": true
      },
      {
        "description": "Whether current element is a dimmable section",
        "module": "dimmer",
        "name": "is dimmable",
        "isDummy": true
      },
      {
        "description": "Whether dimmer is disabled",
        "module": "dimmer",
        "name": "is disabled",
        "isDummy": true
      },
      {
        "description": "Whether dimmer is not disabled",
        "module": "dimmer",
        "name": "is enabled",
        "isDummy": true
      },
      {
        "description": "Whether dimmable section is body",
        "module": "dimmer",
        "name": "is page",
        "isDummy": true
      },
      {
        "description": "Whether dimmer is a page dimmer",
        "module": "dimmer",
        "name": "is page dimmer",
        "isDummy": true
      },
      {
        "description": "Sets page dimmer to active",
        "module": "dimmer",
        "name": "set active",
        "isDummy": true
      },
      {
        "description": "Sets an element as a dimmable section",
        "module": "dimmer",
        "name": "set dimmable",
        "isDummy": true
      },
      {
        "description": "Sets a dimmable section as dimmed",
        "module": "dimmer",
        "name": "set dimmed",
        "isDummy": true
      },
      {
        "description": "Sets current dimmer as a page dimmer",
        "module": "dimmer",
        "name": "set page dimmer",
        "isDummy": true
      },
      {
        "description": "Sets a dimmer as disabled",
        "module": "dimmer",
        "name": "set disabled",
        "isDummy": true
      }
    ]
  },
  "dropdown": {
    "name": "dropdown",
    "callbacks": [
      {
        "description": "Is called after a dropdown value changes. Receives the name and value of selection and the active menu element",
        "module": "dropdown",
        "name": "onChange",
        "context": "Dropdown",
        "params": {
          "value": {
            "type": "any"
          },
          "text": {
            "type": "any"
          },
          "$choice": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a dropdown selection is added using a multiple select dropdown, only receives the added value",
        "module": "dropdown",
        "name": "onAdd",
        "context": "Dropdown",
        "params": {
          "addedValue": {
            "type": "any"
          },
          "addedText": {
            "type": "any"
          },
          "$addedChoice": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a dropdown selection is removed using a multiple select dropdown, only receives the removed value",
        "module": "dropdown",
        "name": "onRemove",
        "context": "Dropdown",
        "params": {
          "removedValue": {
            "type": "any"
          },
          "removedText": {
            "type": "any"
          },
          "$removedChoice": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Allows you to modify a label before it is added. Expects the jQ DOM element for a label to be returned.",
        "module": "dropdown",
        "name": "onLabelCreate",
        "context": "$label (jQDOM)",
        "params": {
          "value": {
            "type": "any"
          },
          "text": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Called when a label is remove, return false; will prevent the label from being removed.",
        "module": "dropdown",
        "name": "onLabelRemove",
        "context": "$label (jqDOM)",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a label is selected by a user",
        "module": "dropdown",
        "name": "onLabelSelect",
        "context": "Dropdown",
        "params": {
          "$selectedLabels": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a dropdown is searched with no matching values",
        "module": "dropdown",
        "name": "onNoResults",
        "context": "Dropdown",
        "params": {
          "searchValue": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called before a dropdown is shown. If false is returned, dropdown will not be shown.",
        "module": "dropdown",
        "name": "onShow",
        "context": "Dropdown"
      },
      {
        "description": "Is called before a dropdown is hidden. If false is returned, dropdown will not be hidden.",
        "module": "dropdown",
        "name": "onHide",
        "context": "Dropdown"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "on",
        "": "click",
        "description": "Event used to trigger dropdown (Hover, Click, Custom Event)",
        "type": "any",
        "default": "click",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "allowReselection",
        "": "FALSE",
        "description": "When set to true will fire onChange even when the value a user select matches the currently selected value.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "allowAdditions",
        "": "FALSE",
        "description": "Whether search selection should allow users to add their own selections, works for single or multiselect.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "hideAdditions",
        "": "TRUE",
        "description": "When disabled user additions will appear in the results menu using a specially formatted selection item formatted by templates.addition.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "'activate', 'select', 'combo', 'nothing', 'hide', Function",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "action",
        "": "auto",
        "description": "Sets a default action to occur. (See usage guide)",
        "type": "'activate' | 'select' | 'combo' | 'nothing' | 'hide' | Function",
        "default": "activate",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "minCharacters",
        "": "1",
        "description": "The minimum characters for a search to begin showing results",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "'both', 'value', 'text'",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "match",
        "": "both",
        "description": "When using search selection specifies how to match values.",
        "type": "'both' | 'value' | 'text'",
        "default": "both",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "selectOnKeydown",
        "": "TRUE",
        "description": "Whether dropdown should select new option when using keyboard shortcuts. Setting to false will require enter or left click to confirm a choice.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "forceSelection",
        "": "TRUE",
        "description": "Whether search selection will force currently selected choice when element is blurred.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "allowCategorySelection",
        "": "FALSE",
        "description": "Whether menu items with sub-menus (categories) should be selectable",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "'auto', 'value', false",
        "module": "dropdown",
        "category": "Frequently Used Settings",
        "name": "placeholder",
        "": "auto",
        "description": "auto: Convert option with \"\" (blank string) value to placeholder text, value: Sets string value to placeholder text, leaves \"\" value, false: Leaves \"\" value as a selectable option",
        "type": "'auto' | 'value' | false",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Remote Settings",
        "name": "apiSettings",
        "": "FALSE",
        "description": "Can be set to an object to specify API settings for retrieving remote selection menu content from an API endpoint",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Remote Settings",
        "name": "fields",
        "": "",
        "description": "List mapping dropdown content to JSON Property when using API",
        "type": "any",
        "default": "{\"remoteValues\":\"results\",\"values\":\"values\",\"disabled\":\"disabled\",\"name\":\"name\",\"value\":\"value\",\"text\":\"text\"}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Remote Settings",
        "name": "saveRemoteData",
        "": "",
        "description": "When enabled will automatically store selected name/value pairs in sessionStorage to preserve user selection on page refresh. Disabling will clear remote dropdown values on refresh.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Multiple Select Settings",
        "name": "useLabels",
        "": "TRUE",
        "description": "Whether multiselect should use labels. Must be set to true when allowAdditions is true",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Multiple Select Settings",
        "name": "maxSelections",
        "": "FALSE",
        "description": "When set to a number, sets the maximum number of selections",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Multiple Select Settings",
        "name": "glyphWidth",
        "": "1.0714",
        "description": "Maximum glyph width, used to calculate search size. This is usually size of a \"W\" in your font in em",
        "type": "any",
        "default": 1.037,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Multiple Select Settings",
        "name": "label",
        "": "",
        "description": "Allows customization of multi-select labels",
        "type": "any",
        "default": "{\"transition\":\"scale\",\"duration\":200,\"variation\":false}",
        "isDummy": true
      },
      {
        "values": "'auto', 'upward', 'downward'",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "direction",
        "": "'auto'",
        "description": "When set to auto determines direction based on whether dropdown can fit on screen. Set to upward or downward to always force a direction.",
        "type": "'auto' | 'upward' | 'downward'",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "keepOnScreen",
        "": "TRUE",
        "description": "Whether dropdown should try to keep itself on screen by checking whether menus display position in its context (Default context is page).",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "context",
        "": "window",
        "description": "Element context to use when checking whether can show when keepOnScreen: true",
        "type": "HTMLElement | JQuery | string",
        "default": "HTMLElement",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "fullTextSearch",
        "": "FALSE",
        "description": "Specifying to \"true\" will use a fuzzy full text search, setting to \"exact\" will force the exact search to be matched somewhere in the string",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "preserveHTML",
        "": "TRUE",
        "description": "Whether HTML included in dropdown values should be preserved. (Allows icons to show up in selected value)",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "sortSelect",
        "": "FALSE",
        "description": "Whether to sort values when creating a dropdown automatically from a select element.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "showOnFocus",
        "": "TRUE",
        "description": "Whether to show dropdown menu automatically on element focus.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "allowTab",
        "": "TRUE",
        "description": "Whether to allow the element to be navigable by keyboard, by automatically creating a tabindex",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "transition",
        "": "auto (slide down / slide up)",
        "description": "Named transition to use when animating menu in and out. Defaults to slide down or slide up depending on dropdown direction. Fade and slide down are available without including ui transitions",
        "type": "AnimationNames",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "duration",
        "": "200",
        "description": "Duration of animation events",
        "type": "number",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "keys",
        "": "",
        "description": "The keycode used to represent keyboard shortcuts. To avoid issues with some foreign languages, you can pass false for comma delimiter's value",
        "type": "any",
        "default": "{\"backspace\":8,\"delimiter\":188,\"deleteKey\":46,\"enter\":13,\"escape\":27,\"pageUp\":33,\"pageDown\":34,\"leftArrow\":37,\"upArrow\":38,\"rightArrow\":39,\"downArrow\":40}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "dropdown",
        "category": "Additional Settings",
        "name": "delay",
        "": "",
        "description": "Time in milliseconds to debounce show or hide behavior when on: hover is used, or when touch is used.",
        "type": "number",
        "default": "{\"hide\":300,\"show\":200,\"search\":20,\"touch\":50}",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Is called after a dropdown value changes. Receives the name and value of selection and the active menu element",
        "module": "dropdown",
        "name": "onChange",
        "context": "Dropdown",
        "params": {
          "value": {
            "type": "any"
          },
          "text": {
            "type": "any"
          },
          "$choice": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a dropdown selection is added using a multiple select dropdown, only receives the added value",
        "module": "dropdown",
        "name": "onAdd",
        "context": "Dropdown",
        "params": {
          "addedValue": {
            "type": "any"
          },
          "addedText": {
            "type": "any"
          },
          "$addedChoice": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a dropdown selection is removed using a multiple select dropdown, only receives the removed value",
        "module": "dropdown",
        "name": "onRemove",
        "context": "Dropdown",
        "params": {
          "removedValue": {
            "type": "any"
          },
          "removedText": {
            "type": "any"
          },
          "$removedChoice": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Allows you to modify a label before it is added. Expects the jQ DOM element for a label to be returned.",
        "module": "dropdown",
        "name": "onLabelCreate",
        "context": "$label (jQDOM)",
        "params": {
          "value": {
            "type": "any"
          },
          "text": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Called when a label is remove, return false; will prevent the label from being removed.",
        "module": "dropdown",
        "name": "onLabelRemove",
        "context": "$label (jqDOM)",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a label is selected by a user",
        "module": "dropdown",
        "name": "onLabelSelect",
        "context": "Dropdown",
        "params": {
          "$selectedLabels": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a dropdown is searched with no matching values",
        "module": "dropdown",
        "name": "onNoResults",
        "context": "Dropdown",
        "params": {
          "searchValue": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called before a dropdown is shown. If false is returned, dropdown will not be shown.",
        "module": "dropdown",
        "name": "onShow",
        "context": "Dropdown",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called before a dropdown is hidden. If false is returned, dropdown will not be hidden.",
        "module": "dropdown",
        "name": "onHide",
        "context": "Dropdown",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "throttle",
        "module": "dropdown",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 200,
        "isDummy": true
      },
      {
        "name": "delimiter",
        "module": "dropdown",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": ",",
        "isDummy": true
      },
      {
        "name": "fireOnInit",
        "module": "dropdown",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "message",
        "module": "dropdown",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"addResult\":\"Add <b>{term}</b>\",\"count\":\"{count} selected\",\"maxSelections\":\"Max {maxCount} selections\",\"noResults\":\"No results found.\",\"serverError\":\"There was an error contacting the server\"}",
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "dropdown",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Recreates dropdown menu from select option values.",
        "module": "dropdown",
        "name": "setup menu",
        "isDummy": true
      },
      {
        "description": "Refreshes all cached selectors and data",
        "module": "dropdown",
        "name": "refresh",
        "isDummy": true
      },
      {
        "description": "Toggles current visibility of dropdown",
        "module": "dropdown",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Shows dropdown",
        "module": "dropdown",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides dropdown",
        "module": "dropdown",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Clears dropdown of selection",
        "module": "dropdown",
        "name": "clear",
        "isDummy": true
      },
      {
        "description": "Hides all other dropdowns that is not current dropdown",
        "module": "dropdown",
        "name": "hide others",
        "isDummy": true
      },
      {
        "description": "Restores dropdown text and value to its value on page load",
        "module": "dropdown",
        "name": "restore defaults",
        "isDummy": true
      },
      {
        "description": "Restores dropdown text to its value on page load",
        "module": "dropdown",
        "name": "restore default text",
        "isDummy": true
      },
      {
        "description": "Restores dropdown text to its prompt, placeholder text",
        "module": "dropdown",
        "name": "restore placeholder text",
        "isDummy": true
      },
      {
        "description": "Restores dropdown value to its value on page load",
        "module": "dropdown",
        "name": "restore default value",
        "isDummy": true
      },
      {
        "description": "Saves current text and value as new defaults (for use with restore)",
        "module": "dropdown",
        "name": "save defaults",
        "isDummy": true
      },
      {
        "description": "Sets value as selected",
        "module": "dropdown",
        "name": "set selected",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Remove value from selected",
        "module": "dropdown",
        "name": "remove selected",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Adds a group of values as selected",
        "module": "dropdown",
        "name": "set selected",
        "params": {
          "...values": {
            "type": "any[]"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets selected values to exactly specified values, removing current selection",
        "module": "dropdown",
        "name": "set exactly",
        "params": {
          "...values": {
            "type": "any[]"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets dropdown text to a value",
        "module": "dropdown",
        "name": "set text",
        "params": {
          "text": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets dropdown input to value (does not update display state)",
        "module": "dropdown",
        "name": "set value",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns current dropdown text",
        "module": "dropdown",
        "name": "get text",
        "isDummy": true
      },
      {
        "description": "Returns current dropdown input value",
        "module": "dropdown",
        "name": "get value",
        "isDummy": true
      },
      {
        "description": "Returns DOM element that matches a given input value",
        "module": "dropdown",
        "name": "get item",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Adds touch events to element",
        "module": "dropdown",
        "name": "bind touch events",
        "isDummy": true
      },
      {
        "description": "Adds mouse events to element",
        "module": "dropdown",
        "name": "bind mouse events",
        "isDummy": true
      },
      {
        "description": "Binds a click to document to determine if you click away from a dropdown",
        "module": "dropdown",
        "name": "bind intent",
        "isDummy": true
      },
      {
        "description": "Unbinds document intent click",
        "module": "dropdown",
        "name": "unbind intent",
        "isDummy": true
      },
      {
        "description": "Returns whether event occurred inside dropdown",
        "module": "dropdown",
        "name": "determine intent",
        "isDummy": true
      },
      {
        "description": "Triggers preset item selection action based on settings passing text/value",
        "module": "dropdown",
        "name": "determine select action",
        "params": {
          "text": {
            "type": "string"
          },
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets dropdown to active state",
        "module": "dropdown",
        "name": "set active",
        "isDummy": true
      },
      {
        "description": "Sets dropdown to visible state",
        "module": "dropdown",
        "name": "set visible",
        "isDummy": true
      },
      {
        "description": "Removes dropdown active state",
        "module": "dropdown",
        "name": "remove active",
        "isDummy": true
      },
      {
        "description": "Removes dropdown visible state",
        "module": "dropdown",
        "name": "remove visible",
        "isDummy": true
      },
      {
        "description": "Returns whether dropdown is a selection dropdown",
        "module": "dropdown",
        "name": "is selection",
        "isDummy": true
      },
      {
        "description": "Returns whether dropdown is animated",
        "module": "dropdown",
        "name": "is animated",
        "isDummy": true
      },
      {
        "description": "Returns whether dropdown is visible",
        "module": "dropdown",
        "name": "is visible",
        "isDummy": true
      },
      {
        "description": "Returns whether dropdown is hidden",
        "module": "dropdown",
        "name": "is hidden",
        "isDummy": true
      },
      {
        "description": "Returns dropdown value as set on page load",
        "module": "dropdown",
        "name": "get default text",
        "isDummy": true
      },
      {
        "description": "Returns placeholder text",
        "module": "dropdown",
        "name": "get placeholder text",
        "isDummy": true
      }
    ]
  },
  "embed": {
    "name": "embed",
    "callbacks": [
      {
        "description": "Callback when iframe is generated",
        "module": "embed",
        "name": "onCreate",
        "context": "$module",
        "params": {
          "url": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Whenever an iframe contents is shown",
        "module": "embed",
        "name": "onDisplay",
        "context": "$module"
      },
      {
        "description": "Callback immediately before Embed is removed from DOM",
        "module": "embed",
        "name": "onPlaceholderDisplay",
        "context": "$module"
      },
      {
        "description": "Callback when module parameters are determined. Allows you to adjust parameters at run time by returning a new parameters object.",
        "module": "embed",
        "name": "onEmbed",
        "context": "$module",
        "params": {
          "parameters": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "embed",
        "category": "Embed Settings",
        "name": "icon",
        "": "FALSE",
        "description": "Specifies an icon to use with placeholder content",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Embed Settings",
        "name": "source",
        "": "FALSE",
        "description": "Specifies a source to use, if no source is provided it will be determined from the domain of a specified url.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Embed Settings",
        "name": "url",
        "": "FALSE",
        "description": "Specifies a url to use for embed",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Embed Settings",
        "name": "id",
        "": "FALSE",
        "description": "Specifies an id value to replace with the {id} value found in templated urls",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Embed Settings",
        "name": "parameters",
        "": "FALSE",
        "description": "Specify an object containing key/value pairs to add to the iframes GET parameters",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Video Settings",
        "name": "autoplay",
        "": "auto",
        "description": "Default setting auto will only autoplay content when a placeholder is specified. Setting to true or false will force autoplay.",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Video Settings",
        "name": "color",
        "": "#444444",
        "description": "Specifies a default chrome color with Vimeo or YouTube.",
        "type": "any",
        "default": "#444444",
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Video Settings",
        "name": "hd",
        "": "TRUE",
        "description": "Whether to prefer HD content",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "embed",
        "category": "Video Settings",
        "name": "brandedUI",
        "": "FALSE",
        "description": "Whether to show networks branded UI like title cards, or after video calls to action.",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback when iframe is generated",
        "module": "embed",
        "name": "onCreate",
        "context": "$module",
        "params": {
          "url": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Whenever an iframe contents is shown",
        "module": "embed",
        "name": "onDisplay",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback immediately before Embed is removed from DOM",
        "module": "embed",
        "name": "onPlaceholderDisplay",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when module parameters are determined. Allows you to adjust parameters at run time by returning a new parameters object.",
        "module": "embed",
        "name": "onEmbed",
        "context": "$module",
        "params": {
          "parameters": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "onReset",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "sources",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"youtube\":{\"name\":\"youtube\",\"type\":\"video\",\"icon\":\"video play\",\"domain\":\"youtube.com\",\"url\":\"//www.youtube.com/embed/{id}\"},\"vimeo\":{\"name\":\"vimeo\",\"type\":\"video\",\"icon\":\"video play\",\"domain\":\"vimeo.com\",\"url\":\"//player.vimeo.com/video/{id}\"}}",
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "name": "api",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onPause",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onPlay",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onStop",
        "module": "embed",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Changes iframe to a new content source",
        "module": "embed",
        "name": "change",
        "params": {
          "source": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Removes embed and shows placeholder content if available",
        "module": "embed",
        "name": "reset",
        "isDummy": true
      },
      {
        "description": "Shows embed content",
        "module": "embed",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides embed content and shows placeholder content",
        "module": "embed",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Returns current content id",
        "module": "embed",
        "name": "get id",
        "isDummy": true
      },
      {
        "description": "Returns placeholder image url",
        "module": "embed",
        "name": "get placeholder",
        "isDummy": true
      },
      {
        "description": "Returns source name",
        "module": "embed",
        "name": "get sources",
        "isDummy": true
      },
      {
        "description": "Returns source type",
        "module": "embed",
        "name": "get type",
        "isDummy": true
      },
      {
        "description": "Returns URL with all parameters added",
        "module": "embed",
        "name": "get url",
        "isDummy": true
      },
      {
        "description": "Returns whether embed content has placeholder",
        "module": "embed",
        "name": "has placeholder",
        "isDummy": true
      },
      {
        "description": "Destroys instance and removes all events",
        "module": "embed",
        "name": "destroy",
        "isDummy": true
      }
    ]
  },
  "form": {
    "name": "form",
    "callbacks": [
      {
        "description": "Callback on each valid field",
        "module": "form",
        "name": "onValid",
        "context": "field"
      },
      {
        "description": "Callback on each invalid field",
        "module": "form",
        "name": "onInvalid",
        "context": "field"
      },
      {
        "description": "Callback if a form is all valid",
        "module": "form",
        "name": "onSuccess",
        "context": "form",
        "params": {
          "event": {
            "type": "any"
          },
          "fields": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback if any form field is invalid",
        "module": "form",
        "name": "onFailure",
        "context": "form",
        "params": {
          "formErrors": {
            "type": "any"
          },
          "fields": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "keyboardShortcuts",
        "": "TRUE",
        "description": "Adds keyboard shortcuts for enter and escape keys to submit form and blur fields respectively",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "'submit', 'blur', 'change'",
        "module": "form",
        "category": "Form Settings",
        "name": "on",
        "": "submit",
        "description": "Event used to trigger validation. Can be either submit, blur or change.",
        "type": "'submit' | 'blur' | 'change'",
        "default": "submit",
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "revalidate",
        "": "TRUE",
        "description": "If set to true will revalidate fields with errors on input change",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "delay",
        "": "TRUE",
        "description": "Delay from last typed letter to validate a field when using on: changeor when revalidating a field.",
        "type": "number",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "inline",
        "": "FALSE",
        "description": "Adds inline error on field validation error",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "transition",
        "": "scale",
        "description": "Named transition to use when animating validation errors. Fade and slide down are available without including ui transitions",
        "type": "AnimationNames",
        "default": "scale",
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Settings",
        "name": "duration",
        "": "150",
        "description": "Animation speed for inline prompt",
        "type": "number",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Prompts",
        "name": "text",
        "": "",
        "description": "",
        "type": "any",
        "default": "{\"unspecifiedRule\":\"Please enter a valid value\",\"unspecifiedField\":\"This field\"}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "form",
        "category": "Form Prompts",
        "name": "prompt",
        "": "",
        "description": "",
        "type": "any",
        "default": "{\"empty\":\"{name} must have a value\",\"checked\":\"{name} must be checked\",\"email\":\"{name} must be a valid e-mail\",\"url\":\"{name} must be a valid url\",\"regExp\":\"{name} is not formatted correctly\",\"integer\":\"{name} must be an integer\",\"decimal\":\"{name} must be a decimal number\",\"number\":\"{name} must be set to a number\",\"is\":\"{name} must be \\\"{ruleValue}\\\"\",\"isExactly\":\"{name} must be exactly \\\"{ruleValue}\\\"\",\"not\":\"{name} cannot be set to \\\"{ruleValue}\\\"\",\"notExactly\":\"{name} cannot be set to exactly \\\"{ruleValue}\\\"\",\"contain\":\"{name} cannot contain \\\"{ruleValue}\\\"\",\"containExactly\":\"{name} cannot contain exactly \\\"{ruleValue}\\\"\",\"doesntContain\":\"{name} must contain  \\\"{ruleValue}\\\"\",\"doesntContainExactly\":\"{name} must contain exactly \\\"{ruleValue}\\\"\",\"minLength\":\"{name} must be at least {ruleValue} characters\",\"length\":\"{name} must be at least {ruleValue} characters\",\"exactLength\":\"{name} must be exactly {ruleValue} characters\",\"maxLength\":\"{name} cannot be longer than {ruleValue} characters\",\"match\":\"{name} must match {ruleValue} field\",\"different\":\"{name} must have a different value than {ruleValue} field\",\"creditCard\":\"{name} must be a valid credit card number\",\"minCount\":\"{name} must have at least {ruleValue} choices\",\"exactCount\":\"{name} must have exactly {ruleValue} choices\",\"maxCount\":\"{name} must have {ruleValue} or less choices\"}",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on each valid field",
        "module": "form",
        "name": "onValid",
        "context": "field",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on each invalid field",
        "module": "form",
        "name": "onInvalid",
        "context": "field",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback if a form is all valid",
        "module": "form",
        "name": "onSuccess",
        "context": "form",
        "params": {
          "event": {
            "type": "any"
          },
          "fields": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback if any form field is invalid",
        "module": "form",
        "name": "onFailure",
        "context": "form",
        "params": {
          "formErrors": {
            "type": "any"
          },
          "fields": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "fields",
        "module": "form",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "form",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "name": "rules",
        "module": "form",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ]
  },
  "modal": {
    "name": "modal",
    "callbacks": [
      {
        "description": "Is called when a modal starts to show.",
        "module": "modal",
        "name": "onShow",
        "context": "Modal"
      },
      {
        "description": "Is called after a modal has finished showing animating.",
        "module": "modal",
        "name": "onVisible",
        "context": "Modal"
      },
      {
        "description": "Is called after a modal starts to hide. If the function returns false, the modal will not hide.",
        "module": "modal",
        "name": "onHide",
        "context": "Modal",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a modal has finished hiding animation.",
        "module": "modal",
        "name": "onHidden",
        "context": "Modal"
      },
      {
        "description": "Is called after a positive, approve or ok button is pressed. If the function returns false, the modal will not hide.",
        "module": "modal",
        "name": "onApprove",
        "context": "Click",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any"
      },
      {
        "description": "Is called after a negative, deny or cancel button is pressed. If the function returns false the modal will not hide.",
        "module": "modal",
        "name": "onDeny",
        "context": "Modal",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "detachable",
        "": "TRUE",
        "description": "If set to false will prevent the modal from being moved to inside the dimmer",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "autofocus",
        "": "TRUE",
        "description": "When true, the first form input inside the modal will receive focus when shown. Set this to false to prevent this behavior.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "observeChanges",
        "": "FALSE",
        "description": "Whether any change in modal DOM should automatically refresh cached positions",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "allowMultiple",
        "": "FALSE",
        "description": "If set to true will not close other visible modals when opening a new one",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "keyboardShortcuts",
        "": "TRUE",
        "description": "Whether to automatically bind keyboard shortcuts",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "offset",
        "": "0",
        "description": "A vertical offset to allow for content outside of modal, for example a close button, to be centered.",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "context",
        "": "body",
        "description": "Selector or jquery object specifying the area to dim",
        "type": "HTMLElement | JQuery | string",
        "default": "body",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "closable",
        "": "TRUE",
        "description": "Setting to false will not allow you to close the modal by clicking on the dimmer",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "dimmerSettings",
        "": "",
        "description": "You can specify custom settings to extend UI dimmer",
        "type": "any",
        "default": "{\"closable\":false,\"useCSS\":true}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "transition",
        "": "scale",
        "description": "Named transition to use when animating menu in and out, full list can be found in ui transitions docs.",
        "type": "AnimationNames",
        "default": "scale",
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "duration",
        "": "400",
        "description": "Duration of animation",
        "type": "number",
        "default": 500,
        "isDummy": true
      },
      {
        "values": "",
        "module": "modal",
        "category": "Modal Settings",
        "name": "queue",
        "": "FALSE",
        "description": "Whether additional animations should queue",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Is called when a modal starts to show.",
        "module": "modal",
        "name": "onShow",
        "context": "Modal",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a modal has finished showing animating.",
        "module": "modal",
        "name": "onVisible",
        "context": "Modal",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a modal starts to hide. If the function returns false, the modal will not hide.",
        "module": "modal",
        "name": "onHide",
        "context": "Modal",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a modal has finished hiding animation.",
        "module": "modal",
        "name": "onHidden",
        "context": "Modal",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a positive, approve or ok button is pressed. If the function returns false, the modal will not hide.",
        "module": "modal",
        "name": "onApprove",
        "context": "Click",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a negative, deny or cancel button is pressed. If the function returns false the modal will not hide.",
        "module": "modal",
        "name": "onDeny",
        "context": "Modal",
        "params": {
          "$element": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "inverted",
        "module": "modal",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "blurring",
        "module": "modal",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "padding",
        "module": "modal",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 50,
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Shows the modal",
        "module": "modal",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides the modal",
        "module": "modal",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Toggles the modal",
        "module": "modal",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Refreshes centering of modal on page",
        "module": "modal",
        "name": "refresh",
        "isDummy": true
      },
      {
        "description": "Shows associated page dimmer",
        "module": "modal",
        "name": "show dimmer",
        "isDummy": true
      },
      {
        "description": "Hides associated page dimmer",
        "module": "modal",
        "name": "hide dimmer",
        "isDummy": true
      },
      {
        "description": "Hides all modals not selected modal in a dimmer",
        "module": "modal",
        "name": "hide others",
        "isDummy": true
      },
      {
        "description": "Hides all visible modals in the same dimmer",
        "module": "modal",
        "name": "hide all",
        "isDummy": true
      },
      {
        "description": "Caches current modal size",
        "module": "modal",
        "name": "cache sizes",
        "isDummy": true
      },
      {
        "description": "Returns whether the modal can fit on the page",
        "module": "modal",
        "name": "can fit",
        "isDummy": true
      },
      {
        "description": "Returns whether the modal is active",
        "module": "modal",
        "name": "is active",
        "isDummy": true
      },
      {
        "description": "Sets modal to active",
        "module": "modal",
        "name": "set active",
        "isDummy": true
      },
      {
        "description": "Attach modal events to another element",
        "module": "modal",
        "name": "attach events",
        "params": {
          "selector": {
            "type": "HTMLElement | JQuery | string"
          },
          "behavior?": {
            "type": "Modal.BehaviorNames"
          }
        },
        "isDummy": true
      }
    ]
  },
  "nag": {
    "name": "nag",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "persist",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "displayTime",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "animation",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"show\":\"slide\",\"hide\":\"slide\"}",
        "isDummy": true
      },
      {
        "name": "context",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "detachable",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "expires",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 30,
        "isDummy": true
      },
      {
        "name": "domain",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "path",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "/",
        "isDummy": true
      },
      {
        "name": "storageMethod",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "cookie",
        "isDummy": true
      },
      {
        "name": "key",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "nag",
        "isDummy": true
      },
      {
        "name": "value",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "dismiss",
        "isDummy": true
      },
      {
        "name": "speed",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 500,
        "isDummy": true
      },
      {
        "name": "easing",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "easeOutQuad",
        "isDummy": true
      },
      {
        "name": "onHide",
        "module": "nag",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ]
  },
  "popup": {
    "name": "popup",
    "callbacks": [
      {
        "description": "Callback on popup element creation, with created popup",
        "module": "popup",
        "name": "onCreate",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback immediately before Popup is removed from DOM",
        "module": "popup",
        "name": "onRemove",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback before popup is shown. Returning false from this callback will cancel the popup from showing.",
        "module": "popup",
        "name": "onShow",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback after popup is shown",
        "module": "popup",
        "name": "onVisible",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback before popup is hidden. Returning false from this callback will cancel the popup from hiding.",
        "module": "popup",
        "name": "onHide",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback after popup is hidden",
        "module": "popup",
        "name": "onHidden",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback after popup cannot be plaed on screen",
        "module": "popup",
        "name": "onUnplaceable",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "popup",
        "": "FALSE",
        "description": "Can specify a DOM element that should be used as the popup. This is useful for including a pre-formatted popup.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "exclusive",
        "": "FALSE",
        "description": "Whether all other popups should be hidden when this popup is opened",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "movePopup",
        "": "TRUE",
        "description": "Whether to move popup to same offset container as target element when popup already exists on the page. Using a popup inside of an element without overflow:visible, like a sidebar, may require you to set this to false",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "observeChanges",
        "": "TRUE",
        "description": "Whether popup should attach mutationObservers to automatically run destroy when the element is removed from the page's DOM.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "boundary",
        "": "window",
        "description": "When the popup surpasses the boundary of this element, it will attempt to find another display position.",
        "type": "any",
        "default": "HTMLElement",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "context",
        "": "body",
        "description": "Selector or jquery object specifying where the popup should be created.",
        "type": "HTMLElement | JQuery | string",
        "default": "body",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "scrollContext",
        "": "window",
        "description": "Will automatically hide a popup on scroll event in this context",
        "type": "HTMLElement | JQuery | string",
        "default": "HTMLElement",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "jitter",
        "": "2",
        "description": "Number of pixels that a popup is allowed to appear outside the boundaries of its context. This allows for permissible rounding errors when an element is against the edge of its context.",
        "type": "any",
        "default": 2,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "position",
        "": "top left",
        "description": "Position that the popup should appear",
        "type": "any",
        "default": "top left",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "inline",
        "": "FALSE",
        "description": "If a popup is inline it will be created next to current element, allowing for local css rules to apply. It will not be removed from the DOM after being hidden. Otherwise popups will appended to body and removed after being hidden.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "preserve",
        "": "FALSE",
        "description": "Whether popup contents should be preserved in the page after being hidden, allowing it to re-appear slightly faster on subsequent loads.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "prefer",
        "": "adjacent",
        "description": "Can be set to adjacent or opposite to prefer adjacent or opposite position if popup cannot fit on screen",
        "type": "any",
        "default": "opposite",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "lastResort",
        "": "FALSE",
        "description": "When set to false, a popup will not appear and produce an error message if it cannot entirely fit on page. Setting this to a position like, right center forces the popup to use this position as a last resort even if it is partially offstage. Setting this to true will use the last attempted position.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "on",
        "": "hover",
        "description": "Event used to trigger popup. Can be either focus, click, hover, or manual. Manual popups must be triggered with $('.element').popup('show');",
        "type": "any",
        "default": "hover",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "delay",
        "": "",
        "description": "Delay in milliseconds before showing or hiding a popup on hover or focus",
        "type": "number",
        "default": "{\"show\":50,\"hide\":70}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "transition",
        "": "slide down",
        "description": "Named transition to use when animating menu in and out. Fade and slide down are available without including ui transitions",
        "type": "AnimationNames",
        "default": "scale",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "duration",
        "": "200",
        "description": "Duration of animation events",
        "type": "number",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "setFluidWidth",
        "": "TRUE",
        "description": "Whether popup should set fluid popup variation width on load to avoid width: 100%including padding",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "hoverable",
        "": "FALSE",
        "description": "Whether popup should not close on hover (useful for popup navigation menus)",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "closable",
        "": "TRUE",
        "description": "When using on: 'click' specifies whether clicking the page should close the popup",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "addTouchEvents",
        "": "TRUE",
        "description": "When using on: 'hover' whether touchstart events should be added to allow the popup to be triggered",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "hideOnScroll",
        "": "auto",
        "description": "Whether popup should hide on scroll or touchmove, auto only hides for popups without on: 'click'.",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "target",
        "": "FALSE",
        "description": "If a selector or jQuery object is specified this allows the popup to be positioned relative to that element.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "distanceAway",
        "": "0",
        "description": "Offset for distance of popup from element",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "offset",
        "": "0",
        "description": "Offset in pixels from calculated position",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Popup Settings",
        "name": "maxSearchDepth",
        "": "10",
        "description": "Number of iterations before giving up search for popup position when a popup cannot fit on screen",
        "type": "number",
        "default": 15,
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Content Settings",
        "name": "variation",
        "": "",
        "description": "Popup variation to use, can use multiple variations with a space delimiter",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Content Settings",
        "name": "content",
        "": "",
        "description": "Content to display",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "popup",
        "category": "Content Settings",
        "name": "title",
        "": "",
        "description": "Title to display alongside content",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "DOM",
        "module": "popup",
        "category": "Content Settings",
        "name": "html",
        "": "",
        "description": "HTML content to display instead of preformatted title and content",
        "type": "HTMLElement | JQuery | string",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on popup element creation, with created popup",
        "module": "popup",
        "name": "onCreate",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback immediately before Popup is removed from DOM",
        "module": "popup",
        "name": "onRemove",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before popup is shown. Returning false from this callback will cancel the popup from showing.",
        "module": "popup",
        "name": "onShow",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after popup is shown",
        "module": "popup",
        "name": "onVisible",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback before popup is hidden. Returning false from this callback will cancel the popup from hiding.",
        "module": "popup",
        "name": "onHide",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after popup is hidden",
        "module": "popup",
        "name": "onHidden",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after popup cannot be plaed on screen",
        "module": "popup",
        "name": "onUnplaceable",
        "context": "$popup",
        "params": {
          "$module": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "popup",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Shows popup",
        "module": "popup",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides popup",
        "module": "popup",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Hides all visible pop ups on the page",
        "module": "popup",
        "name": "hide all",
        "isDummy": true
      },
      {
        "description": "Returns current popup dom element",
        "module": "popup",
        "name": "get popup",
        "isDummy": true
      },
      {
        "description": "Changes current popup content",
        "module": "popup",
        "name": "change content",
        "params": {
          "html": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Toggles visibility of popup",
        "module": "popup",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Returns whether popup is visible",
        "module": "popup",
        "name": "is visible",
        "isDummy": true
      },
      {
        "description": "Returns whether popup is hidden",
        "module": "popup",
        "name": "is hidden",
        "isDummy": true
      },
      {
        "description": "Returns whether popup is created and inserted into the page",
        "module": "popup",
        "name": "exists",
        "isDummy": true
      },
      {
        "description": "Adjusts popup when content size changes (only necessary for centered popups)",
        "module": "popup",
        "name": "reposition",
        "isDummy": true
      },
      {
        "description": "Repositions a popup",
        "module": "popup",
        "name": "set position",
        "params": {
          "position": {
            "type": "Positions"
          }
        },
        "isDummy": true
      },
      {
        "description": "Removes popup from the page and removes all events",
        "module": "popup",
        "name": "destroy",
        "isDummy": true
      },
      {
        "description": "Removes popup from the page",
        "module": "popup",
        "name": "remove popup",
        "isDummy": true
      }
    ]
  },
  "progress": {
    "name": "progress",
    "callbacks": [
      {
        "description": "Callback on percentage change",
        "module": "progress",
        "name": "onChange",
        "context": "Progress",
        "params": {
          "percent": {
            "type": "any"
          },
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on success state",
        "module": "progress",
        "name": "onSuccess",
        "context": "Progress",
        "params": {
          "total": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on active state",
        "module": "progress",
        "name": "onActive",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on error state",
        "module": "progress",
        "name": "onError",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on warning state",
        "module": "progress",
        "name": "onWarning",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "autoSuccess",
        "": "TRUE",
        "description": "Whether success state should automatically trigger when progress completes",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "showActivity",
        "": "TRUE",
        "description": "Whether progress should automatically show activity when incremented",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "limitValues",
        "": "TRUE",
        "description": "When set to true, values that calculate to above 100% or below 0% will be adjusted. When set to false, inappropriate values will produce an error.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "'percent', 'ratio', string",
        "module": "progress",
        "category": "Progress Settings",
        "name": "label",
        "": "percent",
        "description": "Can be set to either to display progress as percent or ratio. Matches up to corresponding text template with the same name.",
        "type": "'percent' | 'ratio' | string",
        "default": "percent",
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "random",
        "": "",
        "description": "When incrementing without value, sets range for random increment value",
        "type": "any",
        "default": "{\"min\":2,\"max\":5}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "precision",
        "": "1",
        "description": "Decimal point precision for calculated progress",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "total",
        "": "FALSE",
        "description": "Setting a total value will make each call to increment get closer to this total (i.e. 1/20, 2/20 etc)",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "progress",
        "category": "Progress Settings",
        "name": "value",
        "": "FALSE",
        "description": "Sets current value, when total is specified, this is used to calculate a ratio of the total, with percent this should be the overall percent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on percentage change",
        "module": "progress",
        "name": "onChange",
        "context": "Progress",
        "params": {
          "percent": {
            "type": "any"
          },
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on success state",
        "module": "progress",
        "name": "onSuccess",
        "context": "Progress",
        "params": {
          "total": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on active state",
        "module": "progress",
        "name": "onActive",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on error state",
        "module": "progress",
        "name": "onError",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on warning state",
        "module": "progress",
        "name": "onWarning",
        "context": "Progress",
        "params": {
          "value": {
            "type": "any"
          },
          "total": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "duration",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 300,
        "isDummy": true
      },
      {
        "name": "updateInterval",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "name": "framerate",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 33.333333333333336,
        "isDummy": true
      },
      {
        "name": "percent",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "failSafeDelay",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 100,
        "isDummy": true
      },
      {
        "name": "onLabelUpdate",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "text",
        "module": "progress",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"active\":false,\"error\":false,\"success\":false,\"warning\":false,\"percent\":\"{percent}%\",\"ratio\":\"{value} of {total}\"}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Sets current percent of progress to value. If using a total will convert from percent to estimated value.",
        "module": "progress",
        "name": "set percent",
        "params": {
          "percent": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets progress to specified value. Will automatically calculate percent from total.",
        "module": "progress",
        "name": "set progress",
        "params": {
          "value": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Increments progress by increment value, if not passed a value will use random amount specified in settings",
        "module": "progress",
        "name": "increment",
        "params": {
          "incrementValue": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Decrements progress by decrement value, if not passed a value will use random amount specified in settings",
        "module": "progress",
        "name": "decrement",
        "params": {
          "decrementValue": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Immediately updates progress to value, ignoring progress animation interval delays",
        "module": "progress",
        "name": "update progress",
        "params": {
          "value": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Finishes progress and sets loaded to 100%",
        "module": "progress",
        "name": "complete",
        "isDummy": true
      },
      {
        "description": "Resets progress to zero",
        "module": "progress",
        "name": "reset",
        "isDummy": true
      },
      {
        "description": "Set total to a new value",
        "module": "progress",
        "name": "set total",
        "params": {
          "total": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Replaces templated string with value, total, percent left and percent.",
        "module": "progress",
        "name": "get text",
        "params": {
          "text": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns normalized value inside acceptable range specified by total.",
        "module": "progress",
        "name": "get normalized value",
        "params": {
          "value": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns percent as last specified",
        "module": "progress",
        "name": "get percent",
        "isDummy": true
      },
      {
        "description": "Returns current progress value",
        "module": "progress",
        "name": "get value",
        "isDummy": true
      },
      {
        "description": "Returns total",
        "module": "progress",
        "name": "get total",
        "isDummy": true
      },
      {
        "description": "Returns whether progress is completed",
        "module": "progress",
        "name": "is complete",
        "isDummy": true
      },
      {
        "description": "Returns whether progress was a success",
        "module": "progress",
        "name": "is success",
        "isDummy": true
      },
      {
        "description": "Returns whether progress is in warning state",
        "module": "progress",
        "name": "is warning",
        "isDummy": true
      },
      {
        "description": "Returns whether progress is in error state",
        "module": "progress",
        "name": "is error",
        "isDummy": true
      },
      {
        "description": "Returns whether progress is in active state",
        "module": "progress",
        "name": "is active",
        "isDummy": true
      },
      {
        "description": "Sets progress to active state",
        "module": "progress",
        "name": "set active",
        "isDummy": true
      },
      {
        "description": "Sets progress to warning state",
        "module": "progress",
        "name": "set warning",
        "isDummy": true
      },
      {
        "description": "Sets progress to success state",
        "module": "progress",
        "name": "set success",
        "isDummy": true
      },
      {
        "description": "Sets progress to error state",
        "module": "progress",
        "name": "set error",
        "isDummy": true
      },
      {
        "description": "Changes progress animation speed",
        "module": "progress",
        "name": "set duration",
        "params": {
          "value": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets progress exterior label to text",
        "module": "progress",
        "name": "set label",
        "params": {
          "text": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets progress bar label to text",
        "module": "progress",
        "name": "set bar label",
        "params": {
          "text": {
            "type": "string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Removes progress to active state",
        "module": "progress",
        "name": "remove active",
        "isDummy": true
      },
      {
        "description": "Removes progress to warning state",
        "module": "progress",
        "name": "remove warning",
        "isDummy": true
      },
      {
        "description": "Removes progress to success state",
        "module": "progress",
        "name": "remove success",
        "isDummy": true
      },
      {
        "description": "Removes progress to error state",
        "module": "progress",
        "name": "remove error",
        "isDummy": true
      }
    ]
  },
  "rating": {
    "name": "rating",
    "callbacks": [
      {
        "description": "Is called after user selects a new rating",
        "module": "rating",
        "name": "onRate",
        "context": "Rating",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "rating",
        "category": "Rating Settings",
        "name": "initialRating",
        "": "0",
        "description": "A number representing the default rating to apply",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "rating",
        "category": "Rating Settings",
        "name": "fireOnInit",
        "": "FALSE",
        "description": "Whether callbacks like onRate should fire immediately after initializing with the current value.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "rating",
        "category": "Rating Settings",
        "name": "clearable",
        "": "auto",
        "description": "By default a rating will be only clearable if there is 1 icon. Setting to true/false will allow or disallow a user to clear their rating",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "rating",
        "category": "Rating Settings",
        "name": "interactive",
        "": "TRUE",
        "description": "Whether to enable user's ability to rate",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Is called after user selects a new rating",
        "module": "rating",
        "name": "onRate",
        "context": "Rating",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "slent",
        "module": "rating",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "maxRating",
        "module": "rating",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 4,
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "rating",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Sets rating programmatically",
        "module": "rating",
        "name": "set rating",
        "params": {
          "rating": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Gets current rating",
        "module": "rating",
        "name": "get rating",
        "isDummy": true
      },
      {
        "description": "Disables interactive rating mode",
        "module": "rating",
        "name": "disable",
        "isDummy": true
      },
      {
        "description": "Enables interactive rating mode",
        "module": "rating",
        "name": "enable",
        "isDummy": true
      },
      {
        "description": "Clears current rating",
        "module": "rating",
        "name": "clear rating",
        "isDummy": true
      }
    ]
  },
  "search": {
    "name": "search",
    "callbacks": [
      {
        "description": "Callback on element selection by user. The first parameter includes the filtered response results for that element. The function should return false to prevent default action (closing search results and selecting value).",
        "module": "search",
        "name": "onSelect",
        "context": "module",
        "params": {
          "result": {
            "type": "any"
          },
          "response": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback after processing element template to add HTML to results. Function should return false to prevent default actions.",
        "module": "search",
        "name": "onResultsAdd",
        "context": "module",
        "params": {
          "html": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on search query",
        "module": "search",
        "name": "onSearchQuery",
        "context": "module",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback on server response",
        "module": "search",
        "name": "onResults",
        "context": "module",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback when results are opened",
        "module": "search",
        "name": "onResultsOpen",
        "context": "results element"
      },
      {
        "description": "Callback when results are closed",
        "module": "search",
        "name": "onResultsClose",
        "context": "results element"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "apiSettings",
        "": "",
        "description": "Settings for API call.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "minCharacters",
        "": "1",
        "description": "Minimum characters to query for results",
        "type": "any",
        "default": 1,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "transition",
        "": "fade",
        "description": "Named transition to use when animating menu in and out. Fade and slide down are available without including ui transitions",
        "type": "AnimationNames",
        "default": "scale",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "duration",
        "": "300",
        "description": "Duration of animation events",
        "type": "number",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "maxResults",
        "": "7",
        "description": "Maximum results to display when using local and simple search, maximum category count for category search",
        "type": "any",
        "default": 7,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "cache",
        "": "TRUE",
        "description": "Caches results locally to avoid requerying server",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "source",
        "": "FALSE",
        "description": "Specify a Javascript object which will be searched locally",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "selectFirstResult",
        "": "FALSE",
        "description": "Whether the search should automatically select the first search result after searching",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "showNoResults",
        "": "FALSE",
        "description": "Whether a \"no results\" message should be shown if no results are found. (These messages can be modified using the template object specified below)",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "searchFullText",
        "": "TRUE",
        "description": "Return local results that match anywhere inside your content",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "fields",
        "": "",
        "description": "List mapping display content to JSON property, either with API or source.",
        "type": "any",
        "default": "{\"categories\":\"results\",\"categoryName\":\"name\",\"categoryResults\":\"results\",\"description\":\"description\",\"image\":\"image\",\"price\":\"price\",\"results\":\"results\",\"title\":\"title\",\"url\":\"url\",\"action\":\"action\",\"actionText\":\"text\",\"actionURL\":\"url\"}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "searchFields",
        "": "",
        "description": "Specify object properties inside local source object which will be searched",
        "type": "any",
        "default": "[\"title\",\"description\"]",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "hideDelay",
        "": "0",
        "description": "Delay before hiding results after search blur",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "searchDelay",
        "": "100",
        "description": "Delay before querying results on inputchange",
        "type": "any",
        "default": 200,
        "isDummy": true
      },
      {
        "values": "",
        "module": "search",
        "category": "Behavior",
        "name": "easing",
        "": "easeOutExpo",
        "description": "Easing equation when using fallback Javascript animation",
        "type": "any",
        "default": "easeOutExpo",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on element selection by user. The first parameter includes the filtered response results for that element. The function should return false to prevent default action (closing search results and selecting value).",
        "module": "search",
        "name": "onSelect",
        "context": "module",
        "params": {
          "result": {
            "type": "any"
          },
          "response": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback after processing element template to add HTML to results. Function should return false to prevent default actions.",
        "module": "search",
        "name": "onResultsAdd",
        "context": "module",
        "params": {
          "html": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on search query",
        "module": "search",
        "name": "onSearchQuery",
        "context": "module",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on server response",
        "module": "search",
        "name": "onResults",
        "context": "module",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when results are opened",
        "module": "search",
        "name": "onResultsOpen",
        "context": "results element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when results are closed",
        "module": "search",
        "name": "onResultsClose",
        "context": "results element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "type",
        "module": "search",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "standard",
        "isDummy": true
      },
      {
        "name": "displayField",
        "module": "search",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "automatic",
        "module": "search",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "search",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Search for value currently set in search input",
        "module": "search",
        "name": "query",
        "isDummy": true
      },
      {
        "description": "Displays message in search results with text, using template matching type",
        "module": "search",
        "name": "display message",
        "params": {
          "text": {
            "type": "string"
          },
          "type": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Cancels current remote search query",
        "module": "search",
        "name": "cancel query",
        "isDummy": true
      },
      {
        "description": "Search local object for specified query and display results",
        "module": "search",
        "name": "search local",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Whether has minimum characters",
        "module": "search",
        "name": "has minimum characters",
        "isDummy": true
      },
      {
        "description": "Search remote endpoint for specified query and display results",
        "module": "search",
        "name": "search remote",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Search object for specified query and return results",
        "module": "search",
        "name": "search object",
        "params": {
          "query": {
            "type": "any"
          },
          "object": {
            "type": "any"
          },
          "searchFields": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Cancels current remote search request",
        "module": "search",
        "name": "cancel query",
        "isDummy": true
      },
      {
        "description": "Whether search is currently focused",
        "module": "search",
        "name": "is focused",
        "isDummy": true
      },
      {
        "description": "Whether search results are visible",
        "module": "search",
        "name": "is visible",
        "isDummy": true
      },
      {
        "description": "Whether search results are empty",
        "module": "search",
        "name": "is empty",
        "isDummy": true
      },
      {
        "description": "Returns current search value",
        "module": "search",
        "name": "get value",
        "isDummy": true
      },
      {
        "description": "Returns JSON object matching searched title or id (see above)",
        "module": "search",
        "name": "get result",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets search input to value",
        "module": "search",
        "name": "set value",
        "params": {
          "value": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Reads cached results for query",
        "module": "search",
        "name": "read cache",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Clears value from cache, if no parameter passed clears all cache",
        "module": "search",
        "name": "clear cache",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Writes cached results for query",
        "module": "search",
        "name": "write cache",
        "params": {
          "query": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Adds HTML to results and displays",
        "module": "search",
        "name": "add results",
        "params": {
          "html": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Shows results container",
        "module": "search",
        "name": "show results",
        "isDummy": true
      },
      {
        "description": "Hides results container",
        "module": "search",
        "name": "hide results",
        "isDummy": true
      },
      {
        "description": "Generates results using parser specified by settings.template",
        "module": "search",
        "name": "generate results",
        "params": {
          "response": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Removes all events",
        "module": "search",
        "name": "destroy",
        "isDummy": true
      }
    ]
  },
  "shape": {
    "name": "shape",
    "callbacks": [
      {
        "description": "Is called before side change",
        "module": "shape",
        "name": "beforeChange",
        "context": "Next Side"
      },
      {
        "description": "Is called after visible side change",
        "module": "shape",
        "name": "onChange",
        "context": "Active Side"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "shape",
        "category": "Shape Settings",
        "name": "duration",
        "": "700ms",
        "description": "Duration of side change animation",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "shape",
        "category": "Shape Settings",
        "name": "width",
        "": "initial",
        "description": "When set to next will use the width of the next side during the shape's animation. When set to initial it will use the width of the shape at initialization. When set to a specifix pixel height, will force the width to that height.",
        "type": "any",
        "default": "initial",
        "isDummy": true
      },
      {
        "values": "",
        "module": "shape",
        "category": "Shape Settings",
        "name": "height",
        "": "initial",
        "description": "When set to next will use the height of the next side during the shape's animation. When set to initial it will use the height of the shape at initialization. When set to a specifix pixel height, will force the height to that height.",
        "type": "any",
        "default": "initial",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Is called before side change",
        "module": "shape",
        "name": "beforeChange",
        "context": "Next Side",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after visible side change",
        "module": "shape",
        "name": "onChange",
        "context": "Active Side",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "jitter",
        "module": "shape",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "allowRepeats",
        "module": "shape",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Flips the shape upward",
        "module": "shape",
        "name": "flip up",
        "isDummy": true
      },
      {
        "description": "Flips the shape downward",
        "module": "shape",
        "name": "flip down",
        "isDummy": true
      },
      {
        "description": "Flips the shape right",
        "module": "shape",
        "name": "flip right",
        "isDummy": true
      },
      {
        "description": "Flips the shape left",
        "module": "shape",
        "name": "flip left",
        "isDummy": true
      },
      {
        "description": "Flips the shape over clock-wise",
        "module": "shape",
        "name": "flip over",
        "isDummy": true
      },
      {
        "description": "Flips the shape over counter-clockwise",
        "module": "shape",
        "name": "flip back",
        "isDummy": true
      },
      {
        "description": "Set the next side to a specific selector",
        "module": "shape",
        "name": "set next side",
        "params": {
          "selector": {
            "type": "HTMLElement | JQuery | string"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns whether shape is currently animating",
        "module": "shape",
        "name": "is animating",
        "isDummy": true
      },
      {
        "description": "Removes all inline styles",
        "module": "shape",
        "name": "reset",
        "isDummy": true
      },
      {
        "description": "Queues an animationtill after current animation",
        "module": "shape",
        "name": "queue",
        "params": {
          "animation": {
            "type": "AnimationNames"
          }
        },
        "isDummy": true
      },
      {
        "description": "Forces a reflow on element",
        "module": "shape",
        "name": "repaint",
        "isDummy": true
      },
      {
        "description": "Set the next side to next sibling to active element",
        "module": "shape",
        "name": "set default side",
        "isDummy": true
      },
      {
        "description": "Sets shape to the content size of the next side",
        "module": "shape",
        "name": "set stage size",
        "isDummy": true
      },
      {
        "description": "Refreshes the selector cache for element sides",
        "module": "shape",
        "name": "refresh",
        "isDummy": true
      },
      {
        "description": "Returns translation for next side staged below",
        "module": "shape",
        "name": "get transform down",
        "isDummy": true
      },
      {
        "description": "Returns translation for next side staged left",
        "module": "shape",
        "name": "get transform left",
        "isDummy": true
      },
      {
        "description": "Returns translation for next side staged right",
        "module": "shape",
        "name": "get transform right",
        "isDummy": true
      },
      {
        "description": "Returns translation for next side staged up",
        "module": "shape",
        "name": "get transform up",
        "isDummy": true
      },
      {
        "description": "Returns translation for next side staged down",
        "module": "shape",
        "name": "get transform down",
        "isDummy": true
      }
    ]
  },
  "sidebar": {
    "name": "sidebar",
    "callbacks": [
      {
        "description": "Is called when a sidebar begins animating in.",
        "module": "sidebar",
        "name": "onVisible",
        "context": "Sidebar"
      },
      {
        "description": "Is called when a sidebar has finished animating in.",
        "module": "sidebar",
        "name": "onShow",
        "context": "Sidebar"
      },
      {
        "description": "Is called when a sidebar begins to hide or show",
        "module": "sidebar",
        "name": "onChange",
        "context": "Sidebar"
      },
      {
        "description": "Is called before a sidebar begins to animate out.",
        "module": "sidebar",
        "name": "onHide",
        "context": "Sidebar"
      },
      {
        "description": "Is called after a sidebar has finished animating out.",
        "module": "sidebar",
        "name": "onHidden",
        "context": "Sidebar"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "context",
        "": "body",
        "description": "Context which sidebar will appear inside",
        "type": "HTMLElement | JQuery | string",
        "default": "body",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "exclusive",
        "": "FALSE",
        "description": "Whether multiple sidebars can be open at once",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "closable",
        "": "TRUE",
        "description": "Whether sidebar can be closed by clicking on page",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "dimPage",
        "": "TRUE",
        "description": "Whether to dim page contents when sidebar is visible",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "scrollLock",
        "": "FALSE",
        "description": "Whether to lock page scroll when sidebar is visible",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "returnScroll",
        "": "FALSE",
        "description": "Whether to return to original scroll position when sidebar is hidden, automatically occurs with transition: scale",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Behavior",
        "name": "delaySetup",
        "": "FALSE",
        "description": "When sidebar is initialized without the proper HTML, using this option will defer creation of DOM to use requestAnimationFrame.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Animation",
        "name": "transition",
        "": "auto",
        "description": "Named transition to use when animating sidebar. Defaults to 'auto' which selects transition from defaultTransition based on direction.",
        "type": "AnimationNames",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Animation",
        "name": "mobileTransition",
        "": "auto",
        "description": "Named transition to use when animating when detecting mobile device. Defaults to 'auto' which selects transition from defaultTransitionbased on direction.",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Animation",
        "name": "defaultTransition",
        "": "",
        "description": "Default transitions for each direction and screen size, used with transition: auto",
        "type": "any",
        "default": "{\"computer\":{\"left\":\"uncover\",\"right\":\"uncover\",\"top\":\"overlay\",\"bottom\":\"overlay\"},\"mobile\":{\"left\":\"uncover\",\"right\":\"uncover\",\"top\":\"overlay\",\"bottom\":\"overlay\"}}",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sidebar",
        "category": "Animation",
        "name": "duration",
        "": "500",
        "description": "Duration of sidebar animation when using legacy Javascript animation",
        "type": "number",
        "default": 500,
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Is called when a sidebar begins animating in.",
        "module": "sidebar",
        "name": "onVisible",
        "context": "Sidebar",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called when a sidebar has finished animating in.",
        "module": "sidebar",
        "name": "onShow",
        "context": "Sidebar",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called when a sidebar begins to hide or show",
        "module": "sidebar",
        "name": "onChange",
        "context": "Sidebar",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called before a sidebar begins to animate out.",
        "module": "sidebar",
        "name": "onHide",
        "context": "Sidebar",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Is called after a sidebar has finished animating out.",
        "module": "sidebar",
        "name": "onHidden",
        "context": "Sidebar",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Attaches sidebar action to given selector. Default event if none specified is toggle",
        "module": "sidebar",
        "name": "attach events",
        "params": {
          "selector": {
            "type": "HTMLElement | JQuery | string"
          },
          "event": {
            "type": "Sidebar.BehaviorNames"
          }
        },
        "isDummy": true
      },
      {
        "description": "Shows sidebar",
        "module": "sidebar",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Hides sidebar",
        "module": "sidebar",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Toggles visibility of sidebar",
        "module": "sidebar",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Returns whether sidebar is visible",
        "module": "sidebar",
        "name": "is visible",
        "isDummy": true
      },
      {
        "description": "Returns whether sidebar is hidden",
        "module": "sidebar",
        "name": "is hidden",
        "isDummy": true
      },
      {
        "description": "Pushes page content to be visible alongside sidebar",
        "module": "sidebar",
        "name": "push page",
        "isDummy": true
      },
      {
        "description": "Returns direction of current sidebar",
        "module": "sidebar",
        "name": "get direction",
        "isDummy": true
      },
      {
        "description": "Returns page content to original position",
        "module": "sidebar",
        "name": "pull page",
        "isDummy": true
      },
      {
        "description": "Adds stylesheet to page head to trigger sidebar animations",
        "module": "sidebar",
        "name": "add body CSS",
        "isDummy": true
      },
      {
        "description": "Removes any inline stylesheets for sidebar animation",
        "module": "sidebar",
        "name": "remove body CSS",
        "isDummy": true
      },
      {
        "description": "Returns vendor prefixed transition end event",
        "module": "sidebar",
        "name": "get transition event",
        "isDummy": true
      }
    ]
  },
  "site": {
    "name": "site",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "modules",
        "module": "site",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "[\"accordion\",\"api\",\"checkbox\",\"dimmer\",\"dropdown\",\"embed\",\"form\",\"modal\",\"nag\",\"popup\",\"rating\",\"shape\",\"sidebar\",\"state\",\"sticky\",\"tab\",\"transition\",\"visit\",\"visibility\"]",
        "isDummy": true
      },
      {
        "name": "siteNamespace",
        "module": "site",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "site",
        "isDummy": true
      },
      {
        "name": "namespaceStub",
        "module": "site",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"cache\":{},\"config\":{},\"sections\":{},\"section\":{},\"utilities\":{}}",
        "isDummy": true
      }
    ]
  },
  "state": {
    "name": "state",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "onActivate",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onDeactivate",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onChange",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "activateTest",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "deactivateTest",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "automatic",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "sync",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "flashDuration",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 1000,
        "isDummy": true
      },
      {
        "name": "filter",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"text\":\".loading, .disabled\",\"active\":\".disabled\"}",
        "isDummy": true
      },
      {
        "name": "context",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "defaults",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"input\":{\"disabled\":true,\"loading\":true,\"active\":true},\"button\":{\"disabled\":true,\"loading\":true,\"active\":true},\"progress\":{\"active\":true,\"success\":true,\"warning\":true,\"error\":true}}",
        "isDummy": true
      },
      {
        "name": "states",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"active\":true,\"disabled\":true,\"error\":true,\"loading\":true,\"success\":true,\"warning\":true}",
        "isDummy": true
      },
      {
        "name": "text",
        "module": "state",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"disabled\":false,\"flash\":false,\"hover\":false,\"active\":false,\"inactive\":false,\"activate\":false,\"deactivate\":false}",
        "isDummy": true
      }
    ]
  },
  "sticky": {
    "name": "sticky",
    "callbacks": [
      {
        "description": "Callback when element is repositioned from layout change",
        "module": "sticky",
        "name": "onReposition",
        "context": "$module"
      },
      {
        "description": "Callback when requestAnimationFrame fires from scroll handler.",
        "module": "sticky",
        "name": "onScroll",
        "context": "$module"
      },
      {
        "description": "Callback when element is fixed to page",
        "module": "sticky",
        "name": "onStick",
        "context": "$module"
      },
      {
        "description": "Callback when element is unfixed from page",
        "module": "sticky",
        "name": "onUnstick",
        "context": "$module"
      },
      {
        "description": "Callback when element is bound to top of parent container",
        "module": "sticky",
        "name": "onTop",
        "context": "$module"
      },
      {
        "description": "Callback when element is bound to bottom of parent container",
        "module": "sticky",
        "name": "onBottom",
        "context": "$module"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "pushing",
        "": "FALSE",
        "description": "Whether element should be \"pushed\" by the viewport, attaching to the bottom of the screen when scrolling up",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "jitter",
        "": "5",
        "description": "Sticky container height will only be set if the difference between heights of container and context is larger than this jitter value.",
        "type": "any",
        "default": 5,
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "observeChanges",
        "": "FALSE",
        "description": "Whether any change in context DOM should automatically refresh cached sticky positions",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "context",
        "": "FALSE",
        "description": "Context which sticky element should stick to",
        "type": "HTMLElement | JQuery | string",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "scrollContext",
        "": "window",
        "description": "Context which sticky should attach onscroll events.",
        "type": "HTMLElement | JQuery | string",
        "default": "HTMLElement",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "offset",
        "": "0",
        "description": "Offset in pixels from the top of the screen when fixing element to viewport",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "sticky",
        "category": "Sticky Settings",
        "name": "bottomOffset",
        "": "0",
        "description": "Offset in pixels from the bottom of the screen when fixing element to viewport",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback when element is repositioned from layout change",
        "module": "sticky",
        "name": "onReposition",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when requestAnimationFrame fires from scroll handler.",
        "module": "sticky",
        "name": "onScroll",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when element is fixed to page",
        "module": "sticky",
        "name": "onStick",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when element is unfixed from page",
        "module": "sticky",
        "name": "onUnstick",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when element is bound to top of parent container",
        "module": "sticky",
        "name": "onTop",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback when element is bound to bottom of parent container",
        "module": "sticky",
        "name": "onBottom",
        "context": "$module",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "container",
        "module": "sticky",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ]
  },
  "tab": {
    "name": "tab",
    "callbacks": [
      {
        "description": "Callback only the first time a tab is loaded",
        "module": "tab",
        "name": "onFirstLoad",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          },
          "parameterArray": {
            "type": "any[]"
          },
          "historyEvent": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Callback every time a tab is loaded",
        "module": "tab",
        "name": "onLoad",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          },
          "parameterArray": {
            "type": "any[]"
          },
          "historyEvent": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Called when a tab begins loading remote content",
        "module": "tab",
        "name": "onRequest",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          }
        },
        "type": "any"
      },
      {
        "description": "Called after a tab becomes visible",
        "module": "tab",
        "name": "onVisible",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          }
        },
        "type": "any"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "auto",
        "": "FALSE",
        "description": "Whether tab should load remote content as same url as history",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "history",
        "": "FALSE",
        "description": "Whether to record history events for tab changes",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "ignoreFirstLoad",
        "": "FALSE",
        "description": "Do not load content remotely on first tab load. Useful when open tab is rendered on server.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "evaluateScripts",
        "": "once",
        "description": "Whether inline scripts in tab HTML should be parsed on tab load. Defaults to once, parsing only on first load. Can also be set to true or false to always parse or never parse inline scripts.",
        "type": "any",
        "default": "once",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "alwaysRefresh",
        "": "FALSE",
        "description": "Tab should reload content every time it is opened",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "deactivate",
        "": "siblings",
        "description": "Can be set to either siblings or all. Siblings will only de-activate tab activators that are siblings of the clicked element when a tab is selected. All will deactivate all other tab activators initialized at the same time.",
        "type": "any",
        "default": "siblings",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "cacheType",
        "": "response",
        "description": "Can be set to either response or html. Response will cache the original response on load, this way callbacks always receive the same content. Using `html` will cache the resulting html after all callbacks, making sure any changes to content are preserved.",
        "type": "any",
        "default": "response",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "cache",
        "": "TRUE",
        "description": "Tab should cache content after loading locally to avoid server trip on second load",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "apiSettings",
        "": "FALSE",
        "description": "Settings object for $.api call",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "historyType",
        "": "hash",
        "description": "Can be set to hash or state. Hash will use an in-page link to create history events. State will use DOM History and load pages from server on refresh.",
        "type": "any",
        "default": "hash",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "path",
        "": "FALSE",
        "description": "When using historyType state you must specify the base URL for all internal links.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "context",
        "": "FALSE",
        "description": "Tabs are limited to those found inside this context",
        "type": "HTMLElement | JQuery | string",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "childrenOnly",
        "": "FALSE",
        "description": "If enabled limits tabs to children of passed context",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "tab",
        "category": "Tab Settings",
        "name": "maxDepth",
        "": "25",
        "description": "Maximum amount of nested tabs allowed (avoids recursion)",
        "type": "any",
        "default": 25,
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback only the first time a tab is loaded",
        "module": "tab",
        "name": "onFirstLoad",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          },
          "parameterArray": {
            "type": "any[]"
          },
          "historyEvent": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback every time a tab is loaded",
        "module": "tab",
        "name": "onLoad",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          },
          "parameterArray": {
            "type": "any[]"
          },
          "historyEvent": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Called when a tab begins loading remote content",
        "module": "tab",
        "name": "onRequest",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Called after a tab becomes visible",
        "module": "tab",
        "name": "onVisible",
        "context": "Tab",
        "params": {
          "tabPath": {
            "type": "string"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "tab",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Attaches tab action to given selector. Default event if none specified is toggle",
        "module": "tab",
        "name": "attach events",
        "params": {
          "selector": {
            "type": "HTMLElement | JQuery | string"
          },
          "event": {
            "type": "Tab.BehaviorNames"
          }
        },
        "isDummy": true
      },
      {
        "description": "Changes tab to path",
        "module": "tab",
        "name": "change tab",
        "params": {
          "path": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets current path to state",
        "module": "tab",
        "name": "set state",
        "params": {
          "path": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Returns current path",
        "module": "tab",
        "name": "get path",
        "isDummy": true
      },
      {
        "description": "Returns whether tab exists",
        "module": "tab",
        "name": "is tab",
        "isDummy": true
      },
      {
        "description": "Returns cached HTML for path",
        "module": "tab",
        "name": "cache read",
        "params": {
          "path": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Sets cached HTML for path",
        "module": "tab",
        "name": "cache add",
        "params": {
          "path": {
            "type": "any"
          },
          "html": {
            "type": "any"
          }
        },
        "isDummy": true
      },
      {
        "description": "Removes cached HTML for path",
        "module": "tab",
        "name": "cache remove",
        "params": {
          "path": {
            "type": "any"
          }
        },
        "isDummy": true
      }
    ]
  },
  "transition": {
    "name": "transition",
    "callbacks": [
      {
        "description": "Callback on each transition that changes visibility to shown",
        "module": "transition",
        "name": "onShow",
        "context": "transitioned element"
      },
      {
        "description": "Callback on each transition that changes visibility to hidden",
        "module": "transition",
        "name": "onHide",
        "context": "transitioned element"
      },
      {
        "description": "Callback on animation start, useful for queued animations",
        "module": "transition",
        "name": "onStart",
        "context": "transitioned element"
      },
      {
        "description": "Callback on each transition complete",
        "module": "transition",
        "name": "onComplete",
        "context": "transitioned element"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "animation",
        "": "fade",
        "description": "Named animation event to used. Must be defined in CSS.",
        "type": "AnimationNames",
        "default": "fade",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "interval",
        "": "0",
        "description": "Interval in MS between each elements transition",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "reverse",
        "": "auto",
        "description": "When an interval is specified, sets order of animations. auto reverses only animations that are hiding.",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "displayType",
        "": "FALSE",
        "description": "Specify the final display type (block, inline-block etc) so that it doesn't have to be calculated.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "duration",
        "": "500ms",
        "description": "Duration of the CSS transition animation",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "useFailSafe",
        "": "TRUE",
        "description": "If enabled a timeout will be added to ensure animationend callback occurs even if element is hidden",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "allowRepeats",
        "": "FALSE",
        "description": "If enabled will allow same animation to be queued while it is already occurring",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "transition",
        "category": "Transition Settings",
        "name": "queue",
        "": "TRUE",
        "description": "Whether to automatically queue animation if another is occurring",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Silences all console output including error messages, regardless of other debug settings.",
        "name": "silent",
        "type": "any",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Callback on each transition that changes visibility to shown",
        "module": "transition",
        "name": "onShow",
        "context": "transitioned element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on each transition that changes visibility to hidden",
        "module": "transition",
        "name": "onHide",
        "context": "transitioned element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on animation start, useful for queued animations",
        "module": "transition",
        "name": "onStart",
        "context": "transitioned element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Callback on each transition complete",
        "module": "transition",
        "name": "onComplete",
        "context": "transitioned element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "failSafeDelay",
        "module": "transition",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 100,
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Stop current animation and preserve queue",
        "module": "transition",
        "name": "stop",
        "isDummy": true
      },
      {
        "description": "Stop current animation and queued animations",
        "module": "transition",
        "name": "stop all",
        "isDummy": true
      },
      {
        "description": "Clears all queued animations",
        "module": "transition",
        "name": "clear queue",
        "isDummy": true
      },
      {
        "description": "Stop current animation and show element",
        "module": "transition",
        "name": "show",
        "isDummy": true
      },
      {
        "description": "Stop current animation and hide element",
        "module": "transition",
        "name": "hide",
        "isDummy": true
      },
      {
        "description": "Toggles between hide and show",
        "module": "transition",
        "name": "toggle",
        "isDummy": true
      },
      {
        "description": "Forces reflow using a more expensive but stable method",
        "module": "transition",
        "name": "force repaint",
        "isDummy": true
      },
      {
        "description": "Triggers reflow on element",
        "module": "transition",
        "name": "repaint",
        "isDummy": true
      },
      {
        "description": "Resets all conditions changes during transition",
        "module": "transition",
        "name": "reset",
        "isDummy": true
      },
      {
        "description": "Enables animation looping",
        "module": "transition",
        "name": "looping",
        "isDummy": true
      },
      {
        "description": "Removes looping state from element",
        "module": "transition",
        "name": "remove looping",
        "isDummy": true
      },
      {
        "description": "Adds disabled state (stops ability to animate)",
        "module": "transition",
        "name": "disable",
        "isDummy": true
      },
      {
        "description": "Removes disabled state",
        "module": "transition",
        "name": "enable",
        "isDummy": true
      },
      {
        "description": "Modifies element animation duration",
        "module": "transition",
        "name": "set duration",
        "params": {
          "duration": {
            "type": "number"
          }
        },
        "isDummy": true
      },
      {
        "description": "Saves all class names and styles to cache to be retrieved after animation",
        "module": "transition",
        "name": "save conditions",
        "isDummy": true
      },
      {
        "description": "Adds back cached names and styles to element",
        "module": "transition",
        "name": "restore conditions",
        "isDummy": true
      },
      {
        "description": "Returns vendor prefixed animation property for animationname",
        "module": "transition",
        "name": "get animation name",
        "isDummy": true
      },
      {
        "description": "Returns vendor prefixed animation property for animationend",
        "module": "transition",
        "name": "get animation event",
        "isDummy": true
      },
      {
        "description": "Returns whether element is currently visible",
        "module": "transition",
        "name": "is visible",
        "isDummy": true
      },
      {
        "description": "Returns whether transition is currently occurring",
        "module": "transition",
        "name": "is animating",
        "isDummy": true
      },
      {
        "description": "Returns whether animation looping is set",
        "module": "transition",
        "name": "is looping",
        "isDummy": true
      },
      {
        "description": "Returns whether animations are supported",
        "module": "transition",
        "name": "is supported",
        "isDummy": true
      }
    ]
  },
  "video": {
    "name": "video",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Regular expressions used for template matching",
        "name": "regExp",
        "type": "any",
        "default": "{\"youtube\":{},\"vimeo\":{}}",
        "isDummy": true
      },
      {
        "description": "Selectors used to find parts of a module",
        "name": "selector",
        "type": "any",
        "default": "{\"embed\":\".embed\",\"placeholder\":\".placeholder\",\"playButton\":\".play\"}",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "source",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "url",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "id",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "aspectRatio",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 1.7777777777777777,
        "isDummy": true
      },
      {
        "name": "onPlay",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onReset",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onChange",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onPause",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onStop",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "width",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "name": "height",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "name": "autoplay",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "auto",
        "isDummy": true
      },
      {
        "name": "color",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "#442359",
        "isDummy": true
      },
      {
        "name": "hd",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "showUI",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "api",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "name": "templates",
        "module": "video",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      }
    ]
  },
  "visibility": {
    "name": "visibility",
    "callbacks": [
      {
        "description": "Element's top edge has passed bottom of screen",
        "module": "visibility",
        "name": "onTopVisible",
        "context": "$element"
      },
      {
        "description": "Element's top edge has passed top of the screen",
        "module": "visibility",
        "name": "onTopPassed",
        "context": "$element"
      },
      {
        "description": "Element's bottom edge has passed bottom of screen",
        "module": "visibility",
        "name": "onBottomVisible",
        "context": "$element"
      },
      {
        "description": "Any part of an element is visible on screen",
        "module": "visibility",
        "name": "onPassing",
        "context": "$element"
      },
      {
        "description": "Element's bottom edge has passed top of screen",
        "module": "visibility",
        "name": "onBottomPassed",
        "context": "$element"
      },
      {
        "description": "Element's top edge has not passed bottom of screen",
        "module": "visibility",
        "name": "onTopVisibleReverse",
        "context": "$element"
      },
      {
        "description": "Element's top edge has not passed top of the screen",
        "module": "visibility",
        "name": "onTopPassedReverse",
        "context": "$element"
      },
      {
        "description": "Element's bottom edge has not passed bottom of screen",
        "module": "visibility",
        "name": "onBottomVisibleReverse",
        "context": "$element"
      },
      {
        "description": "Element's top has not passed top of screen but bottom has",
        "module": "visibility",
        "name": "onPassingReverse",
        "context": "$element"
      },
      {
        "description": "Element's bottom edge has not passed top of screen",
        "module": "visibility",
        "name": "onBottomPassedReverse",
        "context": "$element"
      },
      {
        "description": "Occurs after an image has completed loading",
        "module": "visibility",
        "name": "onLoad",
        "context": "img"
      },
      {
        "description": "Occurs after all img initialized at the same time have loaded.",
        "module": "visibility",
        "name": "onAllLoaded",
        "context": "last loaded img"
      },
      {
        "description": "Occurs after element has been assigned position fixed",
        "module": "visibility",
        "name": "onFixed",
        "context": "$element"
      },
      {
        "description": "Occurs after element has been removed from fixed position",
        "module": "visibility",
        "name": "onUnfixed",
        "context": "$element"
      },
      {
        "description": "Occurs each time an elements calculations are updated",
        "module": "visibility",
        "name": "onUpdate",
        "context": "$element",
        "params": {
          "calculations": {
            "type": "any"
          }
        },
        "type": "any"
      },
      {
        "description": "Occurs whenever element's visibility is refreshed",
        "module": "visibility",
        "name": "onRefresh",
        "context": "$element"
      }
    ],
    "settings": [
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "once",
        "": "TRUE",
        "description": "When set to false a callback will occur each time an element passes the threshold for a condition.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "continuous",
        "": "FALSE",
        "description": "When set to true a callback will occur anytime an element passes a condition not just immediately after the threshold is met.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "type",
        "": "FALSE",
        "description": "Set to image to load images when on screen. Set to fixed to add class name fixed when passed.",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "initialCheck",
        "": "TRUE",
        "description": "Whether visibility conditions should be checked immediately on init",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "context",
        "": "window",
        "description": "The scroll context visibility should use.",
        "type": "HTMLElement | JQuery | string",
        "default": "HTMLElement",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "refreshOnLoad",
        "": "TRUE",
        "description": "Whether visibility conditions should be checked on window load. This ensures that after images load content positions will be updated correctly.",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "refreshOnResize",
        "": "TRUE",
        "description": "Whether visibility conditions should be checked on window resize. Useful when content resizes causes continuous changes in position",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "checkOnRefresh",
        "": "TRUE",
        "description": "Whether visibility conditions should be checked on calls to refresh. These calls can be triggered from either resize, load or manually calling $('.foo').visibility('refresh')",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "zIndex",
        "": "1",
        "description": "Specify a z-index when using type: 'fixed'.",
        "type": "any",
        "default": "10",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "offset",
        "": "0",
        "description": "Value that context scrollTop should be adjusted in pixels. Useful for making content appear below content fixed to the page.",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "includeMargin",
        "": "FALSE",
        "description": "Whether element calculations should include its margin",
        "type": "any",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "throttle",
        "": "FALSE",
        "description": "When set to an integer, scroll position will be debounced using this ms value. false will debounce with requestAnimationFrame.",
        "type": "number",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "observeChanges",
        "": "TRUE",
        "description": "Whether to automatically refresh content when changes are made to the element's DOM subtree",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "transition",
        "": "FALSE",
        "description": "When using type: image allows you to specify transition when showing a loaded image",
        "type": "AnimationNames",
        "default": "fade in",
        "isDummy": true
      },
      {
        "values": "",
        "module": "visibility",
        "category": "Functionality",
        "name": "duration",
        "": "1000",
        "description": "When using type: image allows you to specify transition duration",
        "type": "number",
        "default": 1000,
        "isDummy": true
      },
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Class names used to determine element state",
        "name": "className",
        "type": "any",
        "default": "{\"fixed\":\"fixed\",\"placeholder\":\"placeholder\"}",
        "isDummy": true
      },
      {
        "description": "Metadata used to store XHR and response promise",
        "name": "metadata",
        "type": "any",
        "default": "{\"src\":\"src\"}",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "description": "Element's top edge has passed bottom of screen",
        "module": "visibility",
        "name": "onTopVisible",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's top edge has passed top of the screen",
        "module": "visibility",
        "name": "onTopPassed",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's bottom edge has passed bottom of screen",
        "module": "visibility",
        "name": "onBottomVisible",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Any part of an element is visible on screen",
        "module": "visibility",
        "name": "onPassing",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's bottom edge has passed top of screen",
        "module": "visibility",
        "name": "onBottomPassed",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's top edge has not passed bottom of screen",
        "module": "visibility",
        "name": "onTopVisibleReverse",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's top edge has not passed top of the screen",
        "module": "visibility",
        "name": "onTopPassedReverse",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's bottom edge has not passed bottom of screen",
        "module": "visibility",
        "name": "onBottomVisibleReverse",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's top has not passed top of screen but bottom has",
        "module": "visibility",
        "name": "onPassingReverse",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Element's bottom edge has not passed top of screen",
        "module": "visibility",
        "name": "onBottomPassedReverse",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs after an image has completed loading",
        "module": "visibility",
        "name": "onLoad",
        "context": "img",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs after all img initialized at the same time have loaded.",
        "module": "visibility",
        "name": "onAllLoaded",
        "context": "last loaded img",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs after element has been assigned position fixed",
        "module": "visibility",
        "name": "onFixed",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs after element has been removed from fixed position",
        "module": "visibility",
        "name": "onUnfixed",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs each time an elements calculations are updated",
        "module": "visibility",
        "name": "onUpdate",
        "context": "$element",
        "params": {
          "calculations": {
            "type": "any"
          }
        },
        "type": "any",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "description": "Occurs whenever element's visibility is refreshed",
        "module": "visibility",
        "name": "onRefresh",
        "context": "$element",
        "category": "Callback",
        "isFunction": true,
        "isDummy": true
      },
      {
        "name": "onPassed",
        "module": "visibility",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{}",
        "isDummy": true
      },
      {
        "name": "onOnScreen",
        "module": "visibility",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onOffScreen",
        "module": "visibility",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ],
    "behaviors": [
      {
        "description": "Disable callbacks temporarily. This is useful if you need to adjust scroll position and do not want to trigger callbacks during the position change.",
        "module": "visibility",
        "name": "disable callbacks",
        "isDummy": true
      },
      {
        "description": "Re-enable callbacks",
        "module": "visibility",
        "name": "enable callbacks",
        "isDummy": true
      },
      {
        "description": "Returns whether element is on screen",
        "module": "visibility",
        "name": "is on screen",
        "isDummy": true
      },
      {
        "description": "Returns whether element is off screen",
        "module": "visibility",
        "name": "is off screen",
        "isDummy": true
      },
      {
        "description": "Returns number of pixels passed in current element from top of element",
        "module": "visibility",
        "name": "get pixels passed",
        "isDummy": true
      },
      {
        "description": "Returns element calculations as object",
        "module": "visibility",
        "name": "get element calculations",
        "isDummy": true
      },
      {
        "description": "Returns screen calculations as object",
        "module": "visibility",
        "name": "get screen calculations",
        "isDummy": true
      },
      {
        "description": "Returns screen size as object",
        "module": "visibility",
        "name": "get screen size",
        "isDummy": true
      }
    ]
  },
  "visit": {
    "name": "visit",
    "settings": [
      {
        "description": "Name used in log statements",
        "name": "name",
        "type": "any",
        "default": "Visit",
        "isDummy": true
      },
      {
        "description": "Event namespace. Makes sure module teardown does not effect other events attached to an element.",
        "name": "namespace",
        "type": "any",
        "default": "visit",
        "isDummy": true
      },
      {
        "description": "Debug output to console",
        "name": "debug",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Show console.table output with performance metrics",
        "name": "performance",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "Debug output includes all internal behaviors",
        "name": "verbose",
        "type": "any",
        "default": true,
        "isDummy": true
      },
      {
        "description": "",
        "name": "error",
        "type": "any",
        "default": "{\"method\":\"The method you called is not defined\",\"missingPersist\":\"Using the persist setting requires the inclusion of PersistJS\",\"noCookieStorage\":\"The default storage cookie requires $.cookie to be included.\"}",
        "isDummy": true
      },
      {
        "name": "increment",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "surpass",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "count",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "limit",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "delimiter",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "&",
        "isDummy": true
      },
      {
        "name": "storageMethod",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "localstorage",
        "isDummy": true
      },
      {
        "name": "key",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "{\"count\":\"visit-count\",\"ids\":\"visit-ids\"}",
        "isDummy": true
      },
      {
        "name": "expires",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": 30,
        "isDummy": true
      },
      {
        "name": "domain",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "path",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "default": "/",
        "isDummy": true
      },
      {
        "name": "onLimit",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      },
      {
        "name": "onChange",
        "module": "visit",
        "category": "!!UN-DOCUMENTED!!",
        "description": "No documentation",
        "type": "any",
        "isDummy": true
      }
    ]
  }
}
